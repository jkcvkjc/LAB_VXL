
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003188  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b4  080032b4  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080032b4  080032b4  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032b4  080032b4  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080032bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000058  08003314  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003314  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009907  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd1  00000000  00000000  00029988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170c7  00000000  00000000  0002cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c918  00000000  00000000  00043cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082479  00000000  00000000  000505cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  000d2a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	0800327c 	.word	0x0800327c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	0800327c 	.word	0x0800327c

0800014c <subKeyProcess>:

int TimeOutForKeyPress[NUMBER_OF_BUTTONS] =  {100,100,100};
int button_flag[NUMBER_OF_BUTTONS]={0,0,0};
int button_flag_press_1s[NUMBER_OF_BUTTONS]={0,0,0};

void subKeyProcess(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//TOD
	button_flag[index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000074 	.word	0x20000074

0800016c <getKeyInput>:


void getKeyInput(){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
	for(int i=0;i<NUMBER_OF_BUTTONS;i++){
 8000172:	2300      	movs	r3, #0
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	e099      	b.n	80002ac <getKeyInput+0x140>
		  KeyReg2[i] = KeyReg1[i];
 8000178:	4a51      	ldr	r2, [pc, #324]	; (80002c0 <getKeyInput+0x154>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	4950      	ldr	r1, [pc, #320]	; (80002c4 <getKeyInput+0x158>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg1[i] = KeyReg0[i];
 8000188:	4a4f      	ldr	r2, [pc, #316]	; (80002c8 <getKeyInput+0x15c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	494b      	ldr	r1, [pc, #300]	; (80002c0 <getKeyInput+0x154>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  if(i==0) KeyReg0[i] = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d109      	bne.n	80001b2 <getKeyInput+0x46>
 800019e:	2108      	movs	r1, #8
 80001a0:	484a      	ldr	r0, [pc, #296]	; (80002cc <getKeyInput+0x160>)
 80001a2:	f002 f82b 	bl	80021fc <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4619      	mov	r1, r3
 80001aa:	4a47      	ldr	r2, [pc, #284]	; (80002c8 <getKeyInput+0x15c>)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if(i==1) KeyReg0[i] = HAL_GPIO_ReadPin(MODIFY_GPIO_Port, MODIFY_Pin);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d109      	bne.n	80001cc <getKeyInput+0x60>
 80001b8:	2110      	movs	r1, #16
 80001ba:	4844      	ldr	r0, [pc, #272]	; (80002cc <getKeyInput+0x160>)
 80001bc:	f002 f81e 	bl	80021fc <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4619      	mov	r1, r3
 80001c4:	4a40      	ldr	r2, [pc, #256]	; (80002c8 <getKeyInput+0x15c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if(i==2) KeyReg0[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d109      	bne.n	80001e6 <getKeyInput+0x7a>
 80001d2:	2120      	movs	r1, #32
 80001d4:	483d      	ldr	r0, [pc, #244]	; (80002cc <getKeyInput+0x160>)
 80001d6:	f002 f811 	bl	80021fc <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a3a      	ldr	r2, [pc, #232]	; (80002c8 <getKeyInput+0x15c>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001e6:	4a36      	ldr	r2, [pc, #216]	; (80002c0 <getKeyInput+0x154>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ee:	4936      	ldr	r1, [pc, #216]	; (80002c8 <getKeyInput+0x15c>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d155      	bne.n	80002a6 <getKeyInput+0x13a>
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <getKeyInput+0x154>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000202:	4930      	ldr	r1, [pc, #192]	; (80002c4 <getKeyInput+0x158>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020a:	429a      	cmp	r2, r3
 800020c:	d14b      	bne.n	80002a6 <getKeyInput+0x13a>
		    if (KeyReg2[i] != KeyReg3[i]){
 800020e:	4a2d      	ldr	r2, [pc, #180]	; (80002c4 <getKeyInput+0x158>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000216:	492e      	ldr	r1, [pc, #184]	; (80002d0 <getKeyInput+0x164>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021e:	429a      	cmp	r2, r3
 8000220:	d01c      	beq.n	800025c <getKeyInput+0xf0>
		      KeyReg3[i] = KeyReg2[i];
 8000222:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <getKeyInput+0x158>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022a:	4929      	ldr	r1, [pc, #164]	; (80002d0 <getKeyInput+0x164>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		      if (KeyReg3[i] == PRESSED_STATE){
 8000232:	4a27      	ldr	r2, [pc, #156]	; (80002d0 <getKeyInput+0x164>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d108      	bne.n	8000250 <getKeyInput+0xe4>
		        TimeOutForKeyPress[i] = 100;
 800023e:	4a25      	ldr	r2, [pc, #148]	; (80002d4 <getKeyInput+0x168>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2164      	movs	r1, #100	; 0x64
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		        subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff7f 	bl	800014c <subKeyProcess>
 800024e:	e02a      	b.n	80002a6 <getKeyInput+0x13a>
		      }
		      else button_flag_press_1s[i]=0;
 8000250:	4a21      	ldr	r2, [pc, #132]	; (80002d8 <getKeyInput+0x16c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2100      	movs	r1, #0
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025a:	e024      	b.n	80002a6 <getKeyInput+0x13a>

		    }else{
		       TimeOutForKeyPress[i] --;
 800025c:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <getKeyInput+0x168>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	1e5a      	subs	r2, r3, #1
 8000266:	491b      	ldr	r1, [pc, #108]	; (80002d4 <getKeyInput+0x168>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        if (TimeOutForKeyPress[i] == 0){
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <getKeyInput+0x168>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d115      	bne.n	80002a6 <getKeyInput+0x13a>
		          if(KeyReg3[i] == PRESSED_STATE){
 800027a:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <getKeyInput+0x164>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d105      	bne.n	8000292 <getKeyInput+0x126>
		        	  button_flag_press_1s[i]=1;
 8000286:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <getKeyInput+0x16c>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2101      	movs	r1, #1
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000290:	e004      	b.n	800029c <getKeyInput+0x130>
		          }
		          else button_flag_press_1s[i]=0;
 8000292:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <getKeyInput+0x16c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2100      	movs	r1, #0
 8000298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		        	  TimeOutForKeyPress[i]=100;
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <getKeyInput+0x168>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2164      	movs	r1, #100	; 0x64
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<NUMBER_OF_BUTTONS;i++){
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	f77f af62 	ble.w	8000178 <getKeyInput+0xc>
		        }
		    }
		  }
	}
}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000000c 	.word	0x2000000c
 80002c4:	20000018 	.word	0x20000018
 80002c8:	20000000 	.word	0x20000000
 80002cc:	40010800 	.word	0x40010800
 80002d0:	20000024 	.word	0x20000024
 80002d4:	20000030 	.word	0x20000030
 80002d8:	20000080 	.word	0x20000080

080002dc <display7Segment12>:
 */


#include "display7Segment.h"

void display7Segment12(int count){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b09      	cmp	r3, #9
 80002e8:	f200 8180 	bhi.w	80005ec <display7Segment12+0x310>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <display7Segment12+0x18>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	0800031d 	.word	0x0800031d
 80002f8:	08000365 	.word	0x08000365
 80002fc:	080003ad 	.word	0x080003ad
 8000300:	080003f5 	.word	0x080003f5
 8000304:	0800043d 	.word	0x0800043d
 8000308:	08000485 	.word	0x08000485
 800030c:	080004cd 	.word	0x080004cd
 8000310:	08000515 	.word	0x08000515
 8000314:	0800055d 	.word	0x0800055d
 8000318:	080005a5 	.word	0x080005a5
	switch(count){
	case 0:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	2101      	movs	r1, #1
 8000320:	48b5      	ldr	r0, [pc, #724]	; (80005f8 <display7Segment12+0x31c>)
 8000322:	f001 ff82 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2102      	movs	r1, #2
 800032a:	48b3      	ldr	r0, [pc, #716]	; (80005f8 <display7Segment12+0x31c>)
 800032c:	f001 ff7d 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2104      	movs	r1, #4
 8000334:	48b0      	ldr	r0, [pc, #704]	; (80005f8 <display7Segment12+0x31c>)
 8000336:	f001 ff78 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2108      	movs	r1, #8
 800033e:	48ae      	ldr	r0, [pc, #696]	; (80005f8 <display7Segment12+0x31c>)
 8000340:	f001 ff73 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	2110      	movs	r1, #16
 8000348:	48ab      	ldr	r0, [pc, #684]	; (80005f8 <display7Segment12+0x31c>)
 800034a:	f001 ff6e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2120      	movs	r1, #32
 8000352:	48a9      	ldr	r0, [pc, #676]	; (80005f8 <display7Segment12+0x31c>)
 8000354:	f001 ff69 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 1);
 8000358:	2201      	movs	r2, #1
 800035a:	2140      	movs	r1, #64	; 0x40
 800035c:	48a6      	ldr	r0, [pc, #664]	; (80005f8 <display7Segment12+0x31c>)
 800035e:	f001 ff64 	bl	800222a <HAL_GPIO_WritePin>
		break;
 8000362:	e144      	b.n	80005ee <display7Segment12+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 1);
 8000364:	2201      	movs	r2, #1
 8000366:	2101      	movs	r1, #1
 8000368:	48a3      	ldr	r0, [pc, #652]	; (80005f8 <display7Segment12+0x31c>)
 800036a:	f001 ff5e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2102      	movs	r1, #2
 8000372:	48a1      	ldr	r0, [pc, #644]	; (80005f8 <display7Segment12+0x31c>)
 8000374:	f001 ff59 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	2104      	movs	r1, #4
 800037c:	489e      	ldr	r0, [pc, #632]	; (80005f8 <display7Segment12+0x31c>)
 800037e:	f001 ff54 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2108      	movs	r1, #8
 8000386:	489c      	ldr	r0, [pc, #624]	; (80005f8 <display7Segment12+0x31c>)
 8000388:	f001 ff4f 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2110      	movs	r1, #16
 8000390:	4899      	ldr	r0, [pc, #612]	; (80005f8 <display7Segment12+0x31c>)
 8000392:	f001 ff4a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 1);
 8000396:	2201      	movs	r2, #1
 8000398:	2120      	movs	r1, #32
 800039a:	4897      	ldr	r0, [pc, #604]	; (80005f8 <display7Segment12+0x31c>)
 800039c:	f001 ff45 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 1);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	4894      	ldr	r0, [pc, #592]	; (80005f8 <display7Segment12+0x31c>)
 80003a6:	f001 ff40 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80003aa:	e120      	b.n	80005ee <display7Segment12+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2101      	movs	r1, #1
 80003b0:	4891      	ldr	r0, [pc, #580]	; (80005f8 <display7Segment12+0x31c>)
 80003b2:	f001 ff3a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2102      	movs	r1, #2
 80003ba:	488f      	ldr	r0, [pc, #572]	; (80005f8 <display7Segment12+0x31c>)
 80003bc:	f001 ff35 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2104      	movs	r1, #4
 80003c4:	488c      	ldr	r0, [pc, #560]	; (80005f8 <display7Segment12+0x31c>)
 80003c6:	f001 ff30 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2108      	movs	r1, #8
 80003ce:	488a      	ldr	r0, [pc, #552]	; (80005f8 <display7Segment12+0x31c>)
 80003d0:	f001 ff2b 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 0);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2110      	movs	r1, #16
 80003d8:	4887      	ldr	r0, [pc, #540]	; (80005f8 <display7Segment12+0x31c>)
 80003da:	f001 ff26 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 1);
 80003de:	2201      	movs	r2, #1
 80003e0:	2120      	movs	r1, #32
 80003e2:	4885      	ldr	r0, [pc, #532]	; (80005f8 <display7Segment12+0x31c>)
 80003e4:	f001 ff21 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2140      	movs	r1, #64	; 0x40
 80003ec:	4882      	ldr	r0, [pc, #520]	; (80005f8 <display7Segment12+0x31c>)
 80003ee:	f001 ff1c 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80003f2:	e0fc      	b.n	80005ee <display7Segment12+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	487f      	ldr	r0, [pc, #508]	; (80005f8 <display7Segment12+0x31c>)
 80003fa:	f001 ff16 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2102      	movs	r1, #2
 8000402:	487d      	ldr	r0, [pc, #500]	; (80005f8 <display7Segment12+0x31c>)
 8000404:	f001 ff11 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2104      	movs	r1, #4
 800040c:	487a      	ldr	r0, [pc, #488]	; (80005f8 <display7Segment12+0x31c>)
 800040e:	f001 ff0c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2108      	movs	r1, #8
 8000416:	4878      	ldr	r0, [pc, #480]	; (80005f8 <display7Segment12+0x31c>)
 8000418:	f001 ff07 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 1);
 800041c:	2201      	movs	r2, #1
 800041e:	2110      	movs	r1, #16
 8000420:	4875      	ldr	r0, [pc, #468]	; (80005f8 <display7Segment12+0x31c>)
 8000422:	f001 ff02 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	2120      	movs	r1, #32
 800042a:	4873      	ldr	r0, [pc, #460]	; (80005f8 <display7Segment12+0x31c>)
 800042c:	f001 fefd 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4870      	ldr	r0, [pc, #448]	; (80005f8 <display7Segment12+0x31c>)
 8000436:	f001 fef8 	bl	800222a <HAL_GPIO_WritePin>
		break;
 800043a:	e0d8      	b.n	80005ee <display7Segment12+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	2101      	movs	r1, #1
 8000440:	486d      	ldr	r0, [pc, #436]	; (80005f8 <display7Segment12+0x31c>)
 8000442:	f001 fef2 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2102      	movs	r1, #2
 800044a:	486b      	ldr	r0, [pc, #428]	; (80005f8 <display7Segment12+0x31c>)
 800044c:	f001 feed 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2104      	movs	r1, #4
 8000454:	4868      	ldr	r0, [pc, #416]	; (80005f8 <display7Segment12+0x31c>)
 8000456:	f001 fee8 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	2108      	movs	r1, #8
 800045e:	4866      	ldr	r0, [pc, #408]	; (80005f8 <display7Segment12+0x31c>)
 8000460:	f001 fee3 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	2110      	movs	r1, #16
 8000468:	4863      	ldr	r0, [pc, #396]	; (80005f8 <display7Segment12+0x31c>)
 800046a:	f001 fede 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2120      	movs	r1, #32
 8000472:	4861      	ldr	r0, [pc, #388]	; (80005f8 <display7Segment12+0x31c>)
 8000474:	f001 fed9 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	485e      	ldr	r0, [pc, #376]	; (80005f8 <display7Segment12+0x31c>)
 800047e:	f001 fed4 	bl	800222a <HAL_GPIO_WritePin>
		break;
 8000482:	e0b4      	b.n	80005ee <display7Segment12+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2101      	movs	r1, #1
 8000488:	485b      	ldr	r0, [pc, #364]	; (80005f8 <display7Segment12+0x31c>)
 800048a:	f001 fece 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 1);
 800048e:	2201      	movs	r2, #1
 8000490:	2102      	movs	r1, #2
 8000492:	4859      	ldr	r0, [pc, #356]	; (80005f8 <display7Segment12+0x31c>)
 8000494:	f001 fec9 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2104      	movs	r1, #4
 800049c:	4856      	ldr	r0, [pc, #344]	; (80005f8 <display7Segment12+0x31c>)
 800049e:	f001 fec4 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2108      	movs	r1, #8
 80004a6:	4854      	ldr	r0, [pc, #336]	; (80005f8 <display7Segment12+0x31c>)
 80004a8:	f001 febf 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 1);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2110      	movs	r1, #16
 80004b0:	4851      	ldr	r0, [pc, #324]	; (80005f8 <display7Segment12+0x31c>)
 80004b2:	f001 feba 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	484f      	ldr	r0, [pc, #316]	; (80005f8 <display7Segment12+0x31c>)
 80004bc:	f001 feb5 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2140      	movs	r1, #64	; 0x40
 80004c4:	484c      	ldr	r0, [pc, #304]	; (80005f8 <display7Segment12+0x31c>)
 80004c6:	f001 feb0 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80004ca:	e090      	b.n	80005ee <display7Segment12+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	4849      	ldr	r0, [pc, #292]	; (80005f8 <display7Segment12+0x31c>)
 80004d2:	f001 feaa 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 1);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2102      	movs	r1, #2
 80004da:	4847      	ldr	r0, [pc, #284]	; (80005f8 <display7Segment12+0x31c>)
 80004dc:	f001 fea5 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2104      	movs	r1, #4
 80004e4:	4844      	ldr	r0, [pc, #272]	; (80005f8 <display7Segment12+0x31c>)
 80004e6:	f001 fea0 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	4842      	ldr	r0, [pc, #264]	; (80005f8 <display7Segment12+0x31c>)
 80004f0:	f001 fe9b 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2110      	movs	r1, #16
 80004f8:	483f      	ldr	r0, [pc, #252]	; (80005f8 <display7Segment12+0x31c>)
 80004fa:	f001 fe96 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2120      	movs	r1, #32
 8000502:	483d      	ldr	r0, [pc, #244]	; (80005f8 <display7Segment12+0x31c>)
 8000504:	f001 fe91 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	483a      	ldr	r0, [pc, #232]	; (80005f8 <display7Segment12+0x31c>)
 800050e:	f001 fe8c 	bl	800222a <HAL_GPIO_WritePin>
		break;
 8000512:	e06c      	b.n	80005ee <display7Segment12+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2101      	movs	r1, #1
 8000518:	4837      	ldr	r0, [pc, #220]	; (80005f8 <display7Segment12+0x31c>)
 800051a:	f001 fe86 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	4835      	ldr	r0, [pc, #212]	; (80005f8 <display7Segment12+0x31c>)
 8000524:	f001 fe81 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2104      	movs	r1, #4
 800052c:	4832      	ldr	r0, [pc, #200]	; (80005f8 <display7Segment12+0x31c>)
 800052e:	f001 fe7c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	2108      	movs	r1, #8
 8000536:	4830      	ldr	r0, [pc, #192]	; (80005f8 <display7Segment12+0x31c>)
 8000538:	f001 fe77 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	482d      	ldr	r0, [pc, #180]	; (80005f8 <display7Segment12+0x31c>)
 8000542:	f001 fe72 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	2120      	movs	r1, #32
 800054a:	482b      	ldr	r0, [pc, #172]	; (80005f8 <display7Segment12+0x31c>)
 800054c:	f001 fe6d 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <display7Segment12+0x31c>)
 8000556:	f001 fe68 	bl	800222a <HAL_GPIO_WritePin>
		break;
 800055a:	e048      	b.n	80005ee <display7Segment12+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	4825      	ldr	r0, [pc, #148]	; (80005f8 <display7Segment12+0x31c>)
 8000562:	f001 fe62 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2102      	movs	r1, #2
 800056a:	4823      	ldr	r0, [pc, #140]	; (80005f8 <display7Segment12+0x31c>)
 800056c:	f001 fe5d 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	4820      	ldr	r0, [pc, #128]	; (80005f8 <display7Segment12+0x31c>)
 8000576:	f001 fe58 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2108      	movs	r1, #8
 800057e:	481e      	ldr	r0, [pc, #120]	; (80005f8 <display7Segment12+0x31c>)
 8000580:	f001 fe53 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	481b      	ldr	r0, [pc, #108]	; (80005f8 <display7Segment12+0x31c>)
 800058a:	f001 fe4e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2120      	movs	r1, #32
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <display7Segment12+0x31c>)
 8000594:	f001 fe49 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4816      	ldr	r0, [pc, #88]	; (80005f8 <display7Segment12+0x31c>)
 800059e:	f001 fe44 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80005a2:	e024      	b.n	80005ee <display7Segment12+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG12_0_GPIO_Port, SEG12_0_Pin, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <display7Segment12+0x31c>)
 80005aa:	f001 fe3e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_1_GPIO_Port, SEG12_1_Pin, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2102      	movs	r1, #2
 80005b2:	4811      	ldr	r0, [pc, #68]	; (80005f8 <display7Segment12+0x31c>)
 80005b4:	f001 fe39 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_2_GPIO_Port, SEG12_2_Pin, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	480e      	ldr	r0, [pc, #56]	; (80005f8 <display7Segment12+0x31c>)
 80005be:	f001 fe34 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_3_GPIO_Port, SEG12_3_Pin, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2108      	movs	r1, #8
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <display7Segment12+0x31c>)
 80005c8:	f001 fe2f 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_4_GPIO_Port, SEG12_4_Pin, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <display7Segment12+0x31c>)
 80005d2:	f001 fe2a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_5_GPIO_Port, SEG12_5_Pin, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <display7Segment12+0x31c>)
 80005dc:	f001 fe25 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_6_GPIO_Port, SEG12_6_Pin, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <display7Segment12+0x31c>)
 80005e6:	f001 fe20 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80005ea:	e000      	b.n	80005ee <display7Segment12+0x312>
	default:
		break;
 80005ec:	bf00      	nop
	}
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40010c00 	.word	0x40010c00

080005fc <display7Segment34>:

void display7Segment34(int count){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b09      	cmp	r3, #9
 8000608:	f200 81bc 	bhi.w	8000984 <display7Segment34+0x388>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <display7Segment34+0x18>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	0800063d 	.word	0x0800063d
 8000618:	08000691 	.word	0x08000691
 800061c:	080006e5 	.word	0x080006e5
 8000620:	08000739 	.word	0x08000739
 8000624:	0800078d 	.word	0x0800078d
 8000628:	080007e1 	.word	0x080007e1
 800062c:	08000835 	.word	0x08000835
 8000630:	08000889 	.word	0x08000889
 8000634:	080008dd 	.word	0x080008dd
 8000638:	08000931 	.word	0x08000931
	switch(count){
	case 0:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	48d3      	ldr	r0, [pc, #844]	; (8000990 <display7Segment34+0x394>)
 8000642:	f001 fdf2 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	48d0      	ldr	r0, [pc, #832]	; (8000990 <display7Segment34+0x394>)
 800064e:	f001 fdec 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	48cd      	ldr	r0, [pc, #820]	; (8000990 <display7Segment34+0x394>)
 800065a:	f001 fde6 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	48ca      	ldr	r0, [pc, #808]	; (8000990 <display7Segment34+0x394>)
 8000666:	f001 fde0 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	48c7      	ldr	r0, [pc, #796]	; (8000990 <display7Segment34+0x394>)
 8000672:	f001 fdda 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067c:	48c4      	ldr	r0, [pc, #784]	; (8000990 <display7Segment34+0x394>)
 800067e:	f001 fdd4 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	48c1      	ldr	r0, [pc, #772]	; (8000990 <display7Segment34+0x394>)
 800068a:	f001 fdce 	bl	800222a <HAL_GPIO_WritePin>
		break;
 800068e:	e17a      	b.n	8000986 <display7Segment34+0x38a>
	case 1:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	48be      	ldr	r0, [pc, #760]	; (8000990 <display7Segment34+0x394>)
 8000696:	f001 fdc8 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	48bb      	ldr	r0, [pc, #748]	; (8000990 <display7Segment34+0x394>)
 80006a2:	f001 fdc2 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	48b8      	ldr	r0, [pc, #736]	; (8000990 <display7Segment34+0x394>)
 80006ae:	f001 fdbc 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b8:	48b5      	ldr	r0, [pc, #724]	; (8000990 <display7Segment34+0x394>)
 80006ba:	f001 fdb6 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c4:	48b2      	ldr	r0, [pc, #712]	; (8000990 <display7Segment34+0x394>)
 80006c6:	f001 fdb0 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d0:	48af      	ldr	r0, [pc, #700]	; (8000990 <display7Segment34+0x394>)
 80006d2:	f001 fdaa 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	48ac      	ldr	r0, [pc, #688]	; (8000990 <display7Segment34+0x394>)
 80006de:	f001 fda4 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80006e2:	e150      	b.n	8000986 <display7Segment34+0x38a>
	case 2:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	48a9      	ldr	r0, [pc, #676]	; (8000990 <display7Segment34+0x394>)
 80006ea:	f001 fd9e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	48a6      	ldr	r0, [pc, #664]	; (8000990 <display7Segment34+0x394>)
 80006f6:	f001 fd98 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000700:	48a3      	ldr	r0, [pc, #652]	; (8000990 <display7Segment34+0x394>)
 8000702:	f001 fd92 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070c:	48a0      	ldr	r0, [pc, #640]	; (8000990 <display7Segment34+0x394>)
 800070e:	f001 fd8c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000718:	489d      	ldr	r0, [pc, #628]	; (8000990 <display7Segment34+0x394>)
 800071a:	f001 fd86 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	489a      	ldr	r0, [pc, #616]	; (8000990 <display7Segment34+0x394>)
 8000726:	f001 fd80 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000730:	4897      	ldr	r0, [pc, #604]	; (8000990 <display7Segment34+0x394>)
 8000732:	f001 fd7a 	bl	800222a <HAL_GPIO_WritePin>
		break;
 8000736:	e126      	b.n	8000986 <display7Segment34+0x38a>
	case 3:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	4894      	ldr	r0, [pc, #592]	; (8000990 <display7Segment34+0x394>)
 800073e:	f001 fd74 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4891      	ldr	r0, [pc, #580]	; (8000990 <display7Segment34+0x394>)
 800074a:	f001 fd6e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	488e      	ldr	r0, [pc, #568]	; (8000990 <display7Segment34+0x394>)
 8000756:	f001 fd68 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000760:	488b      	ldr	r0, [pc, #556]	; (8000990 <display7Segment34+0x394>)
 8000762:	f001 fd62 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076c:	4888      	ldr	r0, [pc, #544]	; (8000990 <display7Segment34+0x394>)
 800076e:	f001 fd5c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000778:	4885      	ldr	r0, [pc, #532]	; (8000990 <display7Segment34+0x394>)
 800077a:	f001 fd56 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	4882      	ldr	r0, [pc, #520]	; (8000990 <display7Segment34+0x394>)
 8000786:	f001 fd50 	bl	800222a <HAL_GPIO_WritePin>
		break;
 800078a:	e0fc      	b.n	8000986 <display7Segment34+0x38a>
	case 4:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	487f      	ldr	r0, [pc, #508]	; (8000990 <display7Segment34+0x394>)
 8000792:	f001 fd4a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079c:	487c      	ldr	r0, [pc, #496]	; (8000990 <display7Segment34+0x394>)
 800079e:	f001 fd44 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a8:	4879      	ldr	r0, [pc, #484]	; (8000990 <display7Segment34+0x394>)
 80007aa:	f001 fd3e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b4:	4876      	ldr	r0, [pc, #472]	; (8000990 <display7Segment34+0x394>)
 80007b6:	f001 fd38 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c0:	4873      	ldr	r0, [pc, #460]	; (8000990 <display7Segment34+0x394>)
 80007c2:	f001 fd32 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007cc:	4870      	ldr	r0, [pc, #448]	; (8000990 <display7Segment34+0x394>)
 80007ce:	f001 fd2c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d8:	486d      	ldr	r0, [pc, #436]	; (8000990 <display7Segment34+0x394>)
 80007da:	f001 fd26 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80007de:	e0d2      	b.n	8000986 <display7Segment34+0x38a>
	case 5:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	486a      	ldr	r0, [pc, #424]	; (8000990 <display7Segment34+0x394>)
 80007e6:	f001 fd20 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f0:	4867      	ldr	r0, [pc, #412]	; (8000990 <display7Segment34+0x394>)
 80007f2:	f001 fd1a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fc:	4864      	ldr	r0, [pc, #400]	; (8000990 <display7Segment34+0x394>)
 80007fe:	f001 fd14 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000808:	4861      	ldr	r0, [pc, #388]	; (8000990 <display7Segment34+0x394>)
 800080a:	f001 fd0e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 1);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000814:	485e      	ldr	r0, [pc, #376]	; (8000990 <display7Segment34+0x394>)
 8000816:	f001 fd08 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000820:	485b      	ldr	r0, [pc, #364]	; (8000990 <display7Segment34+0x394>)
 8000822:	f001 fd02 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	4858      	ldr	r0, [pc, #352]	; (8000990 <display7Segment34+0x394>)
 800082e:	f001 fcfc 	bl	800222a <HAL_GPIO_WritePin>
		break;
 8000832:	e0a8      	b.n	8000986 <display7Segment34+0x38a>
	case 6:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	4855      	ldr	r0, [pc, #340]	; (8000990 <display7Segment34+0x394>)
 800083a:	f001 fcf6 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 1);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000844:	4852      	ldr	r0, [pc, #328]	; (8000990 <display7Segment34+0x394>)
 8000846:	f001 fcf0 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	484f      	ldr	r0, [pc, #316]	; (8000990 <display7Segment34+0x394>)
 8000852:	f001 fcea 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	484c      	ldr	r0, [pc, #304]	; (8000990 <display7Segment34+0x394>)
 800085e:	f001 fce4 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000868:	4849      	ldr	r0, [pc, #292]	; (8000990 <display7Segment34+0x394>)
 800086a:	f001 fcde 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000874:	4846      	ldr	r0, [pc, #280]	; (8000990 <display7Segment34+0x394>)
 8000876:	f001 fcd8 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <display7Segment34+0x394>)
 8000882:	f001 fcd2 	bl	800222a <HAL_GPIO_WritePin>
		break;
 8000886:	e07e      	b.n	8000986 <display7Segment34+0x38a>
	case 7:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	4840      	ldr	r0, [pc, #256]	; (8000990 <display7Segment34+0x394>)
 800088e:	f001 fccc 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000898:	483d      	ldr	r0, [pc, #244]	; (8000990 <display7Segment34+0x394>)
 800089a:	f001 fcc6 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a4:	483a      	ldr	r0, [pc, #232]	; (8000990 <display7Segment34+0x394>)
 80008a6:	f001 fcc0 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b0:	4837      	ldr	r0, [pc, #220]	; (8000990 <display7Segment34+0x394>)
 80008b2:	f001 fcba 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008bc:	4834      	ldr	r0, [pc, #208]	; (8000990 <display7Segment34+0x394>)
 80008be:	f001 fcb4 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 1);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c8:	4831      	ldr	r0, [pc, #196]	; (8000990 <display7Segment34+0x394>)
 80008ca:	f001 fcae 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d4:	482e      	ldr	r0, [pc, #184]	; (8000990 <display7Segment34+0x394>)
 80008d6:	f001 fca8 	bl	800222a <HAL_GPIO_WritePin>
		break;
 80008da:	e054      	b.n	8000986 <display7Segment34+0x38a>
	case 8:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	482b      	ldr	r0, [pc, #172]	; (8000990 <display7Segment34+0x394>)
 80008e2:	f001 fca2 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	4828      	ldr	r0, [pc, #160]	; (8000990 <display7Segment34+0x394>)
 80008ee:	f001 fc9c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f8:	4825      	ldr	r0, [pc, #148]	; (8000990 <display7Segment34+0x394>)
 80008fa:	f001 fc96 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000904:	4822      	ldr	r0, [pc, #136]	; (8000990 <display7Segment34+0x394>)
 8000906:	f001 fc90 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000910:	481f      	ldr	r0, [pc, #124]	; (8000990 <display7Segment34+0x394>)
 8000912:	f001 fc8a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091c:	481c      	ldr	r0, [pc, #112]	; (8000990 <display7Segment34+0x394>)
 800091e:	f001 fc84 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000928:	4819      	ldr	r0, [pc, #100]	; (8000990 <display7Segment34+0x394>)
 800092a:	f001 fc7e 	bl	800222a <HAL_GPIO_WritePin>
		break;
 800092e:	e02a      	b.n	8000986 <display7Segment34+0x38a>
	case 9:
		HAL_GPIO_WritePin(SEG34_0_GPIO_Port, SEG34_0_Pin, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <display7Segment34+0x394>)
 8000936:	f001 fc78 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_1_GPIO_Port, SEG34_1_Pin, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <display7Segment34+0x394>)
 8000942:	f001 fc72 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_2_GPIO_Port, SEG34_2_Pin, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4810      	ldr	r0, [pc, #64]	; (8000990 <display7Segment34+0x394>)
 800094e:	f001 fc6c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_3_GPIO_Port, SEG34_3_Pin, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <display7Segment34+0x394>)
 800095a:	f001 fc66 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_4_GPIO_Port, SEG34_4_Pin, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <display7Segment34+0x394>)
 8000966:	f001 fc60 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_5_GPIO_Port, SEG34_5_Pin, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <display7Segment34+0x394>)
 8000972:	f001 fc5a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG34_6_GPIO_Port, SEG34_6_Pin, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <display7Segment34+0x394>)
 800097e:	f001 fc54 	bl	800222a <HAL_GPIO_WritePin>
		break;
 8000982:	e000      	b.n	8000986 <display7Segment34+0x38a>
	default:
		break;
 8000984:	bf00      	nop
	}
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010c00 	.word	0x40010c00

08000994 <fsm_automatic_run>:
 *  Created on: Nov 7, 2022
 *      Author: ACER
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	switch(mode){
 8000998:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <fsm_automatic_run+0x144>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b04      	cmp	r3, #4
 800099e:	f200 8090 	bhi.w	8000ac2 <fsm_automatic_run+0x12e>
 80009a2:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <fsm_automatic_run+0x14>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	080009bd 	.word	0x080009bd
 80009ac:	080009d1 	.word	0x080009d1
 80009b0:	08000a09 	.word	0x08000a09
 80009b4:	08000a49 	.word	0x08000a49
 80009b8:	08000a89 	.word	0x08000a89
	case INIT:
		setValueLocalModeNormal();
 80009bc:	f000 fdd8 	bl	8001570 <setValueLocalModeNormal>
		mode=NORMAL;
 80009c0:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <fsm_automatic_run+0x144>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
		setTimer3(1000);
 80009c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ca:	f000 ff3f 	bl	800184c <setTimer3>
		break;
 80009ce:	e081      	b.n	8000ad4 <fsm_automatic_run+0x140>
	case NORMAL:
		if(timer3_flag==1){
 80009d0:	4b42      	ldr	r3, [pc, #264]	; (8000adc <fsm_automatic_run+0x148>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d105      	bne.n	80009e4 <fsm_automatic_run+0x50>
			normal_mode();
 80009d8:	f000 fdf4 	bl	80015c4 <normal_mode>
			setTimer3(500);
 80009dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e0:	f000 ff34 	bl	800184c <setTimer3>
		}
		if(button_flag[0]==1){
 80009e4:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <fsm_automatic_run+0x14c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d16c      	bne.n	8000ac6 <fsm_automatic_run+0x132>
			button_flag[0]=0;
 80009ec:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <fsm_automatic_run+0x14c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
			clear_all_traffic_led=0;
 80009f2:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <fsm_automatic_run+0x150>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
			mode=RED;
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <fsm_automatic_run+0x144>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 80009fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a02:	f000 ff23 	bl	800184c <setTimer3>
		}
		break;
 8000a06:	e05e      	b.n	8000ac6 <fsm_automatic_run+0x132>
	case RED:
		red_mode();
 8000a08:	f000 fed4 	bl	80017b4 <red_mode>
		if(button_flag[0]==1){
 8000a0c:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10c      	bne.n	8000a2e <fsm_automatic_run+0x9a>
			button_flag[0]=0;
 8000a14:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
			clear_all_traffic_led=0;
 8000a1a:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <fsm_automatic_run+0x150>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
			mode=GREEN;
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <fsm_automatic_run+0x144>)
 8000a22:	2203      	movs	r2, #3
 8000a24:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 8000a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2a:	f000 ff0f 	bl	800184c <setTimer3>
		}
		if(button_flag[2]==1){
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d149      	bne.n	8000aca <fsm_automatic_run+0x136>
			button_flag[2]=0;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
			setValueRed();
 8000a3c:	f000 fea6 	bl	800178c <setValueRed>
			mode=INIT;
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <fsm_automatic_run+0x144>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a46:	e040      	b.n	8000aca <fsm_automatic_run+0x136>
	case GREEN:
		green_mode();
 8000a48:	f000 f942 	bl	8000cd0 <green_mode>
		if(button_flag[0]==1){
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10c      	bne.n	8000a6e <fsm_automatic_run+0xda>
			button_flag[0]=0;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
			clear_all_traffic_led=0;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <fsm_automatic_run+0x150>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
			mode=YELLOW;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <fsm_automatic_run+0x144>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 8000a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6a:	f000 feef 	bl	800184c <setTimer3>
		}
		if(button_flag[2]==1){
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d12b      	bne.n	8000ace <fsm_automatic_run+0x13a>
			button_flag[2]=0;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
			setValueGreen();
 8000a7c:	f000 f8fc 	bl	8000c78 <setValueGreen>
			mode=INIT;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <fsm_automatic_run+0x144>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a86:	e022      	b.n	8000ace <fsm_automatic_run+0x13a>
	case YELLOW:
		yellow_mode();
 8000a88:	f001 f894 	bl	8001bb4 <yellow_mode>
		if(button_flag[0]==1){
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d109      	bne.n	8000aa8 <fsm_automatic_run+0x114>
			button_flag[0]=0;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
			mode=INIT;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <fsm_automatic_run+0x144>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 8000aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa4:	f000 fed2 	bl	800184c <setTimer3>
		}
		if(button_flag[2]==1){
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d110      	bne.n	8000ad2 <fsm_automatic_run+0x13e>
			button_flag[2]=0;
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <fsm_automatic_run+0x14c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
			setValueGreen();
 8000ab6:	f000 f8df 	bl	8000c78 <setValueGreen>
			mode=INIT;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <fsm_automatic_run+0x144>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ac0:	e007      	b.n	8000ad2 <fsm_automatic_run+0x13e>
	default:
		break;
 8000ac2:	bf00      	nop
 8000ac4:	e006      	b.n	8000ad4 <fsm_automatic_run+0x140>
		break;
 8000ac6:	bf00      	nop
 8000ac8:	e004      	b.n	8000ad4 <fsm_automatic_run+0x140>
		break;
 8000aca:	bf00      	nop
 8000acc:	e002      	b.n	8000ad4 <fsm_automatic_run+0x140>
		break;
 8000ace:	bf00      	nop
 8000ad0:	e000      	b.n	8000ad4 <fsm_automatic_run+0x140>
		break;
 8000ad2:	bf00      	nop
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000008c 	.word	0x2000008c
 8000adc:	200000c8 	.word	0x200000c8
 8000ae0:	20000074 	.word	0x20000074
 8000ae4:	20000090 	.word	0x20000090

08000ae8 <greenBlinking>:
 *      Author: ACER
 */

#include "greenMode.h"

void greenBlinking(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	//turn off all led
	if(clear_all_traffic_led==0){
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <greenBlinking+0x7c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d126      	bne.n	8000b42 <greenBlinking+0x5a>
		clear_all_traffic_led=1;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <greenBlinking+0x7c>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	4819      	ldr	r0, [pc, #100]	; (8000b68 <greenBlinking+0x80>)
 8000b02:	f001 fb92 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4816      	ldr	r0, [pc, #88]	; (8000b68 <greenBlinking+0x80>)
 8000b0e:	f001 fb8c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <greenBlinking+0x80>)
 8000b1a:	f001 fb86 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	4810      	ldr	r0, [pc, #64]	; (8000b68 <greenBlinking+0x80>)
 8000b26:	f001 fb80 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <greenBlinking+0x80>)
 8000b32:	f001 fb7a 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3c:	480a      	ldr	r0, [pc, #40]	; (8000b68 <greenBlinking+0x80>)
 8000b3e:	f001 fb74 	bl	800222a <HAL_GPIO_WritePin>
	}
	//blinking led-green
	if(clear_all_traffic_led==1){
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <greenBlinking+0x7c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d109      	bne.n	8000b5e <greenBlinking+0x76>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <greenBlinking+0x80>)
 8000b50:	f001 fb83 	bl	800225a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <greenBlinking+0x80>)
 8000b5a:	f001 fb7e 	bl	800225a <HAL_GPIO_TogglePin>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000090 	.word	0x20000090
 8000b68:	40010800 	.word	0x40010800

08000b6c <displayTimeGreenAndMode>:

//turn on or turn off 4 led7segment
int statusLed7SegmentMode3=0;
void displayTimeGreenAndMode(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//turn on led7segment 1 and 3
		if(statusLed7SegmentMode3==0){
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <displayTimeGreenAndMode+0xc0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d123      	bne.n	8000bc0 <displayTimeGreenAndMode+0x54>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	482c      	ldr	r0, [pc, #176]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000b7e:	f001 fb54 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	482a      	ldr	r0, [pc, #168]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000b88:	f001 fb4f 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	4827      	ldr	r0, [pc, #156]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000b94:	f001 fb49 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	4824      	ldr	r0, [pc, #144]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000ba0:	f001 fb43 	bl	800222a <HAL_GPIO_WritePin>
			display7Segment12(time_green/10);
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <displayTimeGreenAndMode+0xc8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <displayTimeGreenAndMode+0xcc>)
 8000baa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bae:	1092      	asrs	r2, r2, #2
 8000bb0:	17db      	asrs	r3, r3, #31
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb91 	bl	80002dc <display7Segment12>
			display7Segment34(0);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff fd1e 	bl	80005fc <display7Segment34>
		}
		//turn on led7segment 2 and 4
		if(statusLed7SegmentMode3==1){
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <displayTimeGreenAndMode+0xc0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d128      	bne.n	8000c1a <displayTimeGreenAndMode+0xae>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000bce:	f001 fb2c 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	4816      	ldr	r0, [pc, #88]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000bd8:	f001 fb27 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000be4:	f001 fb21 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <displayTimeGreenAndMode+0xc4>)
 8000bf0:	f001 fb1b 	bl	800222a <HAL_GPIO_WritePin>
			display7Segment12(time_green-10*(time_green/10));
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <displayTimeGreenAndMode+0xc8>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <displayTimeGreenAndMode+0xcc>)
 8000bfa:	fb83 1302 	smull	r1, r3, r3, r2
 8000bfe:	1099      	asrs	r1, r3, #2
 8000c00:	17d3      	asrs	r3, r2, #31
 8000c02:	1ac9      	subs	r1, r1, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	1ad1      	subs	r1, r2, r3
 8000c0e:	4608      	mov	r0, r1
 8000c10:	f7ff fb64 	bl	80002dc <display7Segment12>
			display7Segment34(3);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f7ff fcf1 	bl	80005fc <display7Segment34>
		}
		statusLed7SegmentMode3=1-statusLed7SegmentMode3;
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <displayTimeGreenAndMode+0xc0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f1c3 0301 	rsb	r3, r3, #1
 8000c22:	4a02      	ldr	r2, [pc, #8]	; (8000c2c <displayTimeGreenAndMode+0xc0>)
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000094 	.word	0x20000094
 8000c30:	40010800 	.word	0x40010800
 8000c34:	20000040 	.word	0x20000040
 8000c38:	66666667 	.word	0x66666667

08000c3c <increaseTimeGreen>:

//increase the timer of led-green when press button 2(button_flag[1]=1)
void increaseTimeGreen(){
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	if(button_flag[1]==1){
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <increaseTimeGreen+0x34>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10e      	bne.n	8000c66 <increaseTimeGreen+0x2a>
		button_flag[1]=0;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <increaseTimeGreen+0x34>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
		time_green++;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <increaseTimeGreen+0x38>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <increaseTimeGreen+0x38>)
 8000c56:	6013      	str	r3, [r2, #0]
		if(time_green>99) time_green=1;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <increaseTimeGreen+0x38>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b63      	cmp	r3, #99	; 0x63
 8000c5e:	dd02      	ble.n	8000c66 <increaseTimeGreen+0x2a>
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <increaseTimeGreen+0x38>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
	}
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000074 	.word	0x20000074
 8000c74:	20000040 	.word	0x20000040

08000c78 <setValueGreen>:

void setValueGreen(){
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
		if(time_green+time_yellow>99) {
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <setValueGreen+0x4c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <setValueGreen+0x50>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	2b63      	cmp	r3, #99	; 0x63
 8000c88:	dd09      	ble.n	8000c9e <setValueGreen+0x26>
			time_red=99;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <setValueGreen+0x54>)
 8000c8c:	2263      	movs	r2, #99	; 0x63
 8000c8e:	601a      	str	r2, [r3, #0]
			time_yellow=time_red-time_green;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <setValueGreen+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <setValueGreen+0x4c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <setValueGreen+0x50>)
 8000c9c:	6013      	str	r3, [r2, #0]
		}
		if(time_green+time_yellow<=99) {
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <setValueGreen+0x4c>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <setValueGreen+0x50>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc06      	bgt.n	8000cba <setValueGreen+0x42>
			time_red=time_green+time_yellow;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <setValueGreen+0x4c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <setValueGreen+0x50>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <setValueGreen+0x54>)
 8000cb8:	6013      	str	r3, [r2, #0]
	    }
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000040 	.word	0x20000040
 8000cc8:	20000044 	.word	0x20000044
 8000ccc:	2000003c 	.word	0x2000003c

08000cd0 <green_mode>:

void green_mode(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	increaseTimeGreen();
 8000cd4:	f7ff ffb2 	bl	8000c3c <increaseTimeGreen>
	if(timer1_flag==1){
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <green_mode+0x24>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d107      	bne.n	8000cf0 <green_mode+0x20>
		setTimer1(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce4:	f000 fd7a 	bl	80017dc <setTimer1>
		greenBlinking();
 8000ce8:	f7ff fefe 	bl	8000ae8 <greenBlinking>
		displayTimeGreenAndMode();
 8000cec:	f7ff ff3e 	bl	8000b6c <displayTimeGreenAndMode>
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000b8 	.word	0x200000b8

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 ff94 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f818 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 f89e 	bl	8000e44 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d08:	f000 f850 	bl	8000dac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <main+0x34>)
 8000d0e:	f001 fef5 	bl	8002afc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mode=INIT;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <main+0x38>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
  setTimer1(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f000 fd5f 	bl	80017dc <setTimer1>
  setTimer2(10);
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f000 fd78 	bl	8001814 <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 8000d24:	f7ff fe36 	bl	8000994 <fsm_automatic_run>
 8000d28:	e7fc      	b.n	8000d24 <main+0x2c>
 8000d2a:	bf00      	nop
 8000d2c:	200000d0 	.word	0x200000d0
 8000d30:	2000008c 	.word	0x2000008c

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b090      	sub	sp, #64	; 0x40
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	2228      	movs	r2, #40	; 0x28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fa92 	bl	800326c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fa8e 	bl	800228c <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d76:	f000 f8d3 	bl	8000f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fcfa 	bl	800278c <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 f8bf 	bl	8000f20 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3740      	adds	r7, #64	; 0x40
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000dd2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000de0:	220a      	movs	r2, #10
 8000de2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000df2:	f001 fe33 	bl	8002a5c <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dfc:	f000 f890 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000e0e:	f001 ffc9 	bl	8002da4 <HAL_TIM_ConfigClockSource>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e18:	f000 f882 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_TIM2_Init+0x94>)
 8000e2a:	f002 f991 	bl	8003150 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f000 f874 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000d0 	.word	0x200000d0

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a27      	ldr	r2, [pc, #156]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <MX_GPIO_Init+0xbc>)
 8000e90:	f001 f9cb 	bl	800222a <HAL_GPIO_WritePin>
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG12_0_Pin|SEG12_1_Pin|SEG12_2_Pin|SEG34_3_Pin
 8000e94:	2200      	movs	r2, #0
 8000e96:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000e9a:	481a      	ldr	r0, [pc, #104]	; (8000f04 <MX_GPIO_Init+0xc0>)
 8000e9c:	f001 f9c5 	bl	800222a <HAL_GPIO_WritePin>
                          |SEG34_4_Pin|SEG34_5_Pin|SEG34_6_Pin|SEG12_3_Pin
                          |SEG12_4_Pin|SEG12_5_Pin|SEG12_6_Pin|SEG34_0_Pin
                          |SEG34_1_Pin|SEG34_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SELECT_Pin MODIFY_Pin SET_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|MODIFY_Pin|SET_Pin;
 8000ea0:	2338      	movs	r3, #56	; 0x38
 8000ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <MX_GPIO_Init+0xbc>)
 8000eb4:	f001 f828 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000eb8:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000ebc:	60bb      	str	r3, [r7, #8]
                          |RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <MX_GPIO_Init+0xbc>)
 8000ed2:	f001 f819 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG12_0_Pin SEG12_1_Pin SEG12_2_Pin SEG34_3_Pin
                           SEG34_4_Pin SEG34_5_Pin SEG34_6_Pin SEG12_3_Pin
                           SEG12_4_Pin SEG12_5_Pin SEG12_6_Pin SEG34_0_Pin
                           SEG34_1_Pin SEG34_2_Pin */
  GPIO_InitStruct.Pin = SEG12_0_Pin|SEG12_1_Pin|SEG12_2_Pin|SEG34_3_Pin
 8000ed6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000eda:	60bb      	str	r3, [r7, #8]
                          |SEG34_4_Pin|SEG34_5_Pin|SEG34_6_Pin|SEG12_3_Pin
                          |SEG12_4_Pin|SEG12_5_Pin|SEG12_6_Pin|SEG34_0_Pin
                          |SEG34_1_Pin|SEG34_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_GPIO_Init+0xc0>)
 8000ef0:	f001 f80a 	bl	8001f08 <HAL_GPIO_Init>

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f10:	f000 fcb8 	bl	8001884 <timerRun>
	getKeyInput();
 8000f14:	f7ff f92a 	bl	800016c <getKeyInput>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <trafficlight>:
//turn on or turn off 4 led7segment
int status_led7segment=0;
//count the time of led_green or led_yellow
int counter_second1=0;

void trafficlight(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	  if(state_led==0){
 8000f30:	4b6b      	ldr	r3, [pc, #428]	; (80010e0 <trafficlight+0x1b4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d165      	bne.n	8001004 <trafficlight+0xd8>
		  counter_second++;
 8000f38:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <trafficlight+0x1b8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a69      	ldr	r2, [pc, #420]	; (80010e4 <trafficlight+0x1b8>)
 8000f40:	6013      	str	r3, [r2, #0]
		  if(counter_second<time_green){
 8000f42:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <trafficlight+0x1b8>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <trafficlight+0x1bc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	da23      	bge.n	8000f96 <trafficlight+0x6a>
			  //trang thai 1: led_red_1,led_green_2: bat
			  //			led_yellow_1,led_green_1,led_red_2,led_yellow_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f54:	4865      	ldr	r0, [pc, #404]	; (80010ec <trafficlight+0x1c0>)
 8000f56:	f001 f968 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	4862      	ldr	r0, [pc, #392]	; (80010ec <trafficlight+0x1c0>)
 8000f62:	f001 f962 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6c:	485f      	ldr	r0, [pc, #380]	; (80010ec <trafficlight+0x1c0>)
 8000f6e:	f001 f95c 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f78:	485c      	ldr	r0, [pc, #368]	; (80010ec <trafficlight+0x1c0>)
 8000f7a:	f001 f956 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f84:	4859      	ldr	r0, [pc, #356]	; (80010ec <trafficlight+0x1c0>)
 8000f86:	f001 f950 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f90:	4856      	ldr	r0, [pc, #344]	; (80010ec <trafficlight+0x1c0>)
 8000f92:	f001 f94a 	bl	800222a <HAL_GPIO_WritePin>
		  }
		  if(counter_second>=time_green){
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <trafficlight+0x1b8>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <trafficlight+0x1bc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	db23      	blt.n	8000fea <trafficlight+0xbe>
			  //trang thai 2: led_red_1,led_yellow_2: bat
			  //			led_yellow_1,led_green_1,led_red_2,led_green_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa8:	4850      	ldr	r0, [pc, #320]	; (80010ec <trafficlight+0x1c0>)
 8000faa:	f001 f93e 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb4:	484d      	ldr	r0, [pc, #308]	; (80010ec <trafficlight+0x1c0>)
 8000fb6:	f001 f938 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc0:	484a      	ldr	r0, [pc, #296]	; (80010ec <trafficlight+0x1c0>)
 8000fc2:	f001 f932 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	4847      	ldr	r0, [pc, #284]	; (80010ec <trafficlight+0x1c0>)
 8000fce:	f001 f92c 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd8:	4844      	ldr	r0, [pc, #272]	; (80010ec <trafficlight+0x1c0>)
 8000fda:	f001 f926 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe4:	4841      	ldr	r0, [pc, #260]	; (80010ec <trafficlight+0x1c0>)
 8000fe6:	f001 f920 	bl	800222a <HAL_GPIO_WritePin>
		  }
		  if(counter_second==time_red){
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <trafficlight+0x1b8>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <trafficlight+0x1c4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d106      	bne.n	8001004 <trafficlight+0xd8>
			  // set lai gia tri cua state_led va counter_second
			  state_led=1;
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <trafficlight+0x1b4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
			  counter_second=-1;
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <trafficlight+0x1b8>)
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(state_led==1){
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <trafficlight+0x1b4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d166      	bne.n	80010da <trafficlight+0x1ae>
		  counter_second++;
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <trafficlight+0x1b8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	4a34      	ldr	r2, [pc, #208]	; (80010e4 <trafficlight+0x1b8>)
 8001014:	6013      	str	r3, [r2, #0]
		  if(counter_second<time_green){
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <trafficlight+0x1b8>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <trafficlight+0x1bc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	da23      	bge.n	800106a <trafficlight+0x13e>
			  //trang thai 1: led_red_2,led_green_1: bat
			  //			led_yellow_1,led_green_2,led_red_1,led_yellow_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4830      	ldr	r0, [pc, #192]	; (80010ec <trafficlight+0x1c0>)
 800102a:	f001 f8fe 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	482d      	ldr	r0, [pc, #180]	; (80010ec <trafficlight+0x1c0>)
 8001036:	f001 f8f8 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,1);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001040:	482a      	ldr	r0, [pc, #168]	; (80010ec <trafficlight+0x1c0>)
 8001042:	f001 f8f2 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,1);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104c:	4827      	ldr	r0, [pc, #156]	; (80010ec <trafficlight+0x1c0>)
 800104e:	f001 f8ec 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <trafficlight+0x1c0>)
 800105a:	f001 f8e6 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <trafficlight+0x1c0>)
 8001066:	f001 f8e0 	bl	800222a <HAL_GPIO_WritePin>
		  }
		  if(counter_second>=time_green){
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <trafficlight+0x1b8>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <trafficlight+0x1bc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	db23      	blt.n	80010be <trafficlight+0x192>
			  //trang thai 2: led_red_2,led_yellow_1: bat
			  //			led_yellow_2,led_green_1,led_red_1,led_green_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	481b      	ldr	r0, [pc, #108]	; (80010ec <trafficlight+0x1c0>)
 800107e:	f001 f8d4 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,1);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001088:	4818      	ldr	r0, [pc, #96]	; (80010ec <trafficlight+0x1c0>)
 800108a:	f001 f8ce 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	4815      	ldr	r0, [pc, #84]	; (80010ec <trafficlight+0x1c0>)
 8001096:	f001 f8c8 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,1);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a0:	4812      	ldr	r0, [pc, #72]	; (80010ec <trafficlight+0x1c0>)
 80010a2:	f001 f8c2 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <trafficlight+0x1c0>)
 80010ae:	f001 f8bc 	bl	800222a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <trafficlight+0x1c0>)
 80010ba:	f001 f8b6 	bl	800222a <HAL_GPIO_WritePin>
		  }
		  if(counter_second==time_red-1){
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <trafficlight+0x1c4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <trafficlight+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d106      	bne.n	80010da <trafficlight+0x1ae>
			  //set lại gia tri cua state_led va counter_second
			  state_led=0;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <trafficlight+0x1b4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
			  counter_second=-1;
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <trafficlight+0x1b8>)
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000098 	.word	0x20000098
 80010e4:	20000048 	.word	0x20000048
 80010e8:	20000040 	.word	0x20000040
 80010ec:	40010800 	.word	0x40010800
 80010f0:	2000003c 	.word	0x2000003c

080010f4 <displayFour7Segemnt>:


void displayFour7Segemnt(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	//display led7segment 1 and 3
	if(state_led==0&&status_led7segment==0){
 80010f8:	4bab      	ldr	r3, [pc, #684]	; (80013a8 <displayFour7Segemnt+0x2b4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d14f      	bne.n	80011a0 <displayFour7Segemnt+0xac>
 8001100:	4baa      	ldr	r3, [pc, #680]	; (80013ac <displayFour7Segemnt+0x2b8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d14b      	bne.n	80011a0 <displayFour7Segemnt+0xac>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	48a8      	ldr	r0, [pc, #672]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 800110e:	f001 f88c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	48a6      	ldr	r0, [pc, #664]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 8001118:	f001 f887 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001122:	48a3      	ldr	r0, [pc, #652]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 8001124:	f001 f881 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112e:	48a0      	ldr	r0, [pc, #640]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 8001130:	f001 f87b 	bl	800222a <HAL_GPIO_WritePin>
		display7Segment12((time_red-counter_red)/10);
 8001134:	4b9f      	ldr	r3, [pc, #636]	; (80013b4 <displayFour7Segemnt+0x2c0>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b9f      	ldr	r3, [pc, #636]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	4a9f      	ldr	r2, [pc, #636]	; (80013bc <displayFour7Segemnt+0x2c8>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1092      	asrs	r2, r2, #2
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f8c6 	bl	80002dc <display7Segment12>
		if(counter_second1<time_green) display7Segment34((time_green-counter_green)/10);
 8001150:	4b9b      	ldr	r3, [pc, #620]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b9b      	ldr	r3, [pc, #620]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	da0d      	bge.n	8001178 <displayFour7Segemnt+0x84>
 800115c:	4b99      	ldr	r3, [pc, #612]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b99      	ldr	r3, [pc, #612]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	4a95      	ldr	r2, [pc, #596]	; (80013bc <displayFour7Segemnt+0x2c8>)
 8001168:	fb82 1203 	smull	r1, r2, r2, r3
 800116c:	1092      	asrs	r2, r2, #2
 800116e:	17db      	asrs	r3, r3, #31
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fa42 	bl	80005fc <display7Segment34>
		if(counter_second1>=time_green) display7Segment34((time_yellow-counter_yellow)/10);
 8001178:	4b91      	ldr	r3, [pc, #580]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b91      	ldr	r3, [pc, #580]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	db0d      	blt.n	80011a0 <displayFour7Segemnt+0xac>
 8001184:	4b91      	ldr	r3, [pc, #580]	; (80013cc <displayFour7Segemnt+0x2d8>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b91      	ldr	r3, [pc, #580]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	4a8b      	ldr	r2, [pc, #556]	; (80013bc <displayFour7Segemnt+0x2c8>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	1092      	asrs	r2, r2, #2
 8001196:	17db      	asrs	r3, r3, #31
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fa2e 	bl	80005fc <display7Segment34>
	}
	//display led7segment 2 and 4
	if(state_led==0&&status_led7segment==1){
 80011a0:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <displayFour7Segemnt+0x2b4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f040 80aa 	bne.w	80012fe <displayFour7Segemnt+0x20a>
 80011aa:	4b80      	ldr	r3, [pc, #512]	; (80013ac <displayFour7Segemnt+0x2b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	f040 80a5 	bne.w	80012fe <displayFour7Segemnt+0x20a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2140      	movs	r1, #64	; 0x40
 80011b8:	487d      	ldr	r0, [pc, #500]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 80011ba:	f001 f836 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	487b      	ldr	r0, [pc, #492]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 80011c4:	f001 f831 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	4878      	ldr	r0, [pc, #480]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 80011d0:	f001 f82b 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	4875      	ldr	r0, [pc, #468]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 80011dc:	f001 f825 	bl	800222a <HAL_GPIO_WritePin>
		display7Segment12(time_red-counter_red-((time_red-counter_red)/10)*10);
 80011e0:	4b74      	ldr	r3, [pc, #464]	; (80013b4 <displayFour7Segemnt+0x2c0>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	4b74      	ldr	r3, [pc, #464]	; (80013bc <displayFour7Segemnt+0x2c8>)
 80011ec:	fb83 1302 	smull	r1, r3, r3, r2
 80011f0:	1099      	asrs	r1, r3, #2
 80011f2:	17d3      	asrs	r3, r2, #31
 80011f4:	1ac9      	subs	r1, r1, r3
 80011f6:	460b      	mov	r3, r1
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	1ad1      	subs	r1, r2, r3
 8001200:	4608      	mov	r0, r1
 8001202:	f7ff f86b 	bl	80002dc <display7Segment12>
		if(counter_second1<time_green) {
 8001206:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b6e      	ldr	r3, [pc, #440]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	da26      	bge.n	8001260 <displayFour7Segemnt+0x16c>
			display7Segment34(time_green-counter_green-((time_green-counter_green)/10)*10);
 8001212:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1ad2      	subs	r2, r2, r3
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <displayFour7Segemnt+0x2c8>)
 800121e:	fb83 1302 	smull	r1, r3, r3, r2
 8001222:	1099      	asrs	r1, r3, #2
 8001224:	17d3      	asrs	r3, r2, #31
 8001226:	1ac9      	subs	r1, r1, r3
 8001228:	460b      	mov	r3, r1
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	1ad1      	subs	r1, r2, r3
 8001232:	4608      	mov	r0, r1
 8001234:	f7ff f9e2 	bl	80005fc <display7Segment34>
			if(counter_green<time_green){
 8001238:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	da0d      	bge.n	8001260 <displayFour7Segemnt+0x16c>
					counter_green++;
 8001244:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a5f      	ldr	r2, [pc, #380]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 800124c:	6013      	str	r3, [r2, #0]
					if(counter_green>=time_green) counter_green=0;
 800124e:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	db02      	blt.n	8001260 <displayFour7Segemnt+0x16c>
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_second1>=time_green){
 8001260:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	db26      	blt.n	80012ba <displayFour7Segemnt+0x1c6>
			display7Segment34(time_yellow-counter_yellow-((time_yellow-counter_yellow)/10)*10);
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <displayFour7Segemnt+0x2d8>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	1ad2      	subs	r2, r2, r3
 8001276:	4b51      	ldr	r3, [pc, #324]	; (80013bc <displayFour7Segemnt+0x2c8>)
 8001278:	fb83 1302 	smull	r1, r3, r3, r2
 800127c:	1099      	asrs	r1, r3, #2
 800127e:	17d3      	asrs	r3, r2, #31
 8001280:	1ac9      	subs	r1, r1, r3
 8001282:	460b      	mov	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	1ad1      	subs	r1, r2, r3
 800128c:	4608      	mov	r0, r1
 800128e:	f7ff f9b5 	bl	80005fc <display7Segment34>
			if(counter_yellow<time_yellow){
 8001292:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <displayFour7Segemnt+0x2d8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	da0d      	bge.n	80012ba <displayFour7Segemnt+0x1c6>
					counter_yellow++;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 80012a6:	6013      	str	r3, [r2, #0]
					if(counter_yellow>=time_yellow) counter_yellow=0;
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <displayFour7Segemnt+0x2d8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	db02      	blt.n	80012ba <displayFour7Segemnt+0x1c6>
 80012b4:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_red<time_red){
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <displayFour7Segemnt+0x2c0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	da0d      	bge.n	80012e2 <displayFour7Segemnt+0x1ee>
				counter_red++;
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 80012ce:	6013      	str	r3, [r2, #0]
				if(counter_red>=time_red) counter_red=0;
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <displayFour7Segemnt+0x2c0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	db02      	blt.n	80012e2 <displayFour7Segemnt+0x1ee>
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
		}
		counter_second1++;
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a35      	ldr	r2, [pc, #212]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 80012ea:	6013      	str	r3, [r2, #0]
		if(counter_second1==time_red) counter_second1=0;
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <displayFour7Segemnt+0x2c0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d102      	bne.n	80012fe <displayFour7Segemnt+0x20a>
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
	}
	//display led7segment 1 and 3
	if(state_led==1&&status_led7segment==0){
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <displayFour7Segemnt+0x2b4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d166      	bne.n	80013d4 <displayFour7Segemnt+0x2e0>
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <displayFour7Segemnt+0x2b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d162      	bne.n	80013d4 <displayFour7Segemnt+0x2e0>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4827      	ldr	r0, [pc, #156]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 8001314:	f000 ff89 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4824      	ldr	r0, [pc, #144]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 800131e:	f000 ff84 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	4821      	ldr	r0, [pc, #132]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 800132a:	f000 ff7e 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	481e      	ldr	r0, [pc, #120]	; (80013b0 <displayFour7Segemnt+0x2bc>)
 8001336:	f000 ff78 	bl	800222a <HAL_GPIO_WritePin>
		display7Segment34((time_red-counter_red)/10);
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <displayFour7Segemnt+0x2c0>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <displayFour7Segemnt+0x2c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <displayFour7Segemnt+0x2c8>)
 8001346:	fb82 1203 	smull	r1, r2, r2, r3
 800134a:	1092      	asrs	r2, r2, #2
 800134c:	17db      	asrs	r3, r3, #31
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f953 	bl	80005fc <display7Segment34>
		if(counter_second1<time_green) display7Segment12((time_green-counter_green)/10);
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	da0d      	bge.n	800137e <displayFour7Segemnt+0x28a>
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <displayFour7Segemnt+0x2d4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4a13      	ldr	r2, [pc, #76]	; (80013bc <displayFour7Segemnt+0x2c8>)
 800136e:	fb82 1203 	smull	r1, r2, r2, r3
 8001372:	1092      	asrs	r2, r2, #2
 8001374:	17db      	asrs	r3, r3, #31
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe ffaf 	bl	80002dc <display7Segment12>
		if(counter_second1>=time_green) display7Segment12((time_yellow-counter_yellow)/10);
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <displayFour7Segemnt+0x2cc>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <displayFour7Segemnt+0x2d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	db24      	blt.n	80013d4 <displayFour7Segemnt+0x2e0>
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <displayFour7Segemnt+0x2d8>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <displayFour7Segemnt+0x2dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <displayFour7Segemnt+0x2c8>)
 8001396:	fb82 1203 	smull	r1, r2, r2, r3
 800139a:	1092      	asrs	r2, r2, #2
 800139c:	17db      	asrs	r3, r3, #31
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff9b 	bl	80002dc <display7Segment12>
 80013a6:	e015      	b.n	80013d4 <displayFour7Segemnt+0x2e0>
 80013a8:	20000098 	.word	0x20000098
 80013ac:	200000a8 	.word	0x200000a8
 80013b0:	40010800 	.word	0x40010800
 80013b4:	2000003c 	.word	0x2000003c
 80013b8:	2000009c 	.word	0x2000009c
 80013bc:	66666667 	.word	0x66666667
 80013c0:	200000ac 	.word	0x200000ac
 80013c4:	20000040 	.word	0x20000040
 80013c8:	200000a0 	.word	0x200000a0
 80013cc:	20000044 	.word	0x20000044
 80013d0:	200000a4 	.word	0x200000a4
	}
	//display led7segemnt 2 and 4
	if(state_led==1&&status_led7segment==1){
 80013d4:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <displayFour7Segemnt+0x450>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f040 80aa 	bne.w	8001532 <displayFour7Segemnt+0x43e>
 80013de:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <displayFour7Segemnt+0x454>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	f040 80a5 	bne.w	8001532 <displayFour7Segemnt+0x43e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	4857      	ldr	r0, [pc, #348]	; (800154c <displayFour7Segemnt+0x458>)
 80013ee:	f000 ff1c 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	4855      	ldr	r0, [pc, #340]	; (800154c <displayFour7Segemnt+0x458>)
 80013f8:	f000 ff17 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <displayFour7Segemnt+0x458>)
 8001404:	f000 ff11 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140e:	484f      	ldr	r0, [pc, #316]	; (800154c <displayFour7Segemnt+0x458>)
 8001410:	f000 ff0b 	bl	800222a <HAL_GPIO_WritePin>
		display7Segment34(time_red-counter_red-((time_red-counter_red)/10)*10);
 8001414:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <displayFour7Segemnt+0x45c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <displayFour7Segemnt+0x460>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1ad2      	subs	r2, r2, r3
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <displayFour7Segemnt+0x464>)
 8001420:	fb83 1302 	smull	r1, r3, r3, r2
 8001424:	1099      	asrs	r1, r3, #2
 8001426:	17d3      	asrs	r3, r2, #31
 8001428:	1ac9      	subs	r1, r1, r3
 800142a:	460b      	mov	r3, r1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	1ad1      	subs	r1, r2, r3
 8001434:	4608      	mov	r0, r1
 8001436:	f7ff f8e1 	bl	80005fc <display7Segment34>
		if(counter_second1<time_green) {
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <displayFour7Segemnt+0x468>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <displayFour7Segemnt+0x46c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	da26      	bge.n	8001494 <displayFour7Segemnt+0x3a0>
			display7Segment12(time_green-counter_green-((time_green-counter_green)/10)*10);
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <displayFour7Segemnt+0x46c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <displayFour7Segemnt+0x470>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1ad2      	subs	r2, r2, r3
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <displayFour7Segemnt+0x464>)
 8001452:	fb83 1302 	smull	r1, r3, r3, r2
 8001456:	1099      	asrs	r1, r3, #2
 8001458:	17d3      	asrs	r3, r2, #31
 800145a:	1ac9      	subs	r1, r1, r3
 800145c:	460b      	mov	r3, r1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	1ad1      	subs	r1, r2, r3
 8001466:	4608      	mov	r0, r1
 8001468:	f7fe ff38 	bl	80002dc <display7Segment12>
			if(counter_green<time_green){
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <displayFour7Segemnt+0x470>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <displayFour7Segemnt+0x46c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	da0d      	bge.n	8001494 <displayFour7Segemnt+0x3a0>
					counter_green++;
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <displayFour7Segemnt+0x470>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a39      	ldr	r2, [pc, #228]	; (8001564 <displayFour7Segemnt+0x470>)
 8001480:	6013      	str	r3, [r2, #0]
					if(counter_green>=time_green) counter_green=0;
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <displayFour7Segemnt+0x470>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <displayFour7Segemnt+0x46c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	db02      	blt.n	8001494 <displayFour7Segemnt+0x3a0>
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <displayFour7Segemnt+0x470>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_second1>=time_green){
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <displayFour7Segemnt+0x468>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <displayFour7Segemnt+0x46c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	db26      	blt.n	80014ee <displayFour7Segemnt+0x3fa>
			display7Segment12(time_yellow-counter_yellow-((time_yellow-counter_yellow)/10)*10);
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <displayFour7Segemnt+0x474>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <displayFour7Segemnt+0x478>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1ad2      	subs	r2, r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <displayFour7Segemnt+0x464>)
 80014ac:	fb83 1302 	smull	r1, r3, r3, r2
 80014b0:	1099      	asrs	r1, r3, #2
 80014b2:	17d3      	asrs	r3, r2, #31
 80014b4:	1ac9      	subs	r1, r1, r3
 80014b6:	460b      	mov	r3, r1
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	1ad1      	subs	r1, r2, r3
 80014c0:	4608      	mov	r0, r1
 80014c2:	f7fe ff0b 	bl	80002dc <display7Segment12>
			if(counter_yellow<time_yellow){
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <displayFour7Segemnt+0x478>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <displayFour7Segemnt+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	da0d      	bge.n	80014ee <displayFour7Segemnt+0x3fa>
					counter_yellow++;
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <displayFour7Segemnt+0x478>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <displayFour7Segemnt+0x478>)
 80014da:	6013      	str	r3, [r2, #0]
					if(counter_yellow>=time_yellow) counter_yellow=0;
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <displayFour7Segemnt+0x478>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <displayFour7Segemnt+0x474>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	db02      	blt.n	80014ee <displayFour7Segemnt+0x3fa>
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <displayFour7Segemnt+0x478>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_red<time_red){
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <displayFour7Segemnt+0x460>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <displayFour7Segemnt+0x45c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	da0d      	bge.n	8001516 <displayFour7Segemnt+0x422>
				counter_red++;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <displayFour7Segemnt+0x460>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <displayFour7Segemnt+0x460>)
 8001502:	6013      	str	r3, [r2, #0]
				if(counter_red>=time_red) counter_red=0;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <displayFour7Segemnt+0x460>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <displayFour7Segemnt+0x45c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	db02      	blt.n	8001516 <displayFour7Segemnt+0x422>
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <displayFour7Segemnt+0x460>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
		}
		counter_second1++;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <displayFour7Segemnt+0x468>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <displayFour7Segemnt+0x468>)
 800151e:	6013      	str	r3, [r2, #0]
		if(counter_second1==time_red) counter_second1=0;
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <displayFour7Segemnt+0x468>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <displayFour7Segemnt+0x45c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d102      	bne.n	8001532 <displayFour7Segemnt+0x43e>
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <displayFour7Segemnt+0x468>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
	}
	status_led7segment=1-status_led7segment;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <displayFour7Segemnt+0x454>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1c3 0301 	rsb	r3, r3, #1
 800153a:	4a03      	ldr	r2, [pc, #12]	; (8001548 <displayFour7Segemnt+0x454>)
 800153c:	6013      	str	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000098 	.word	0x20000098
 8001548:	200000a8 	.word	0x200000a8
 800154c:	40010800 	.word	0x40010800
 8001550:	2000003c 	.word	0x2000003c
 8001554:	2000009c 	.word	0x2000009c
 8001558:	66666667 	.word	0x66666667
 800155c:	200000ac 	.word	0x200000ac
 8001560:	20000040 	.word	0x20000040
 8001564:	200000a0 	.word	0x200000a0
 8001568:	20000044 	.word	0x20000044
 800156c:	200000a4 	.word	0x200000a4

08001570 <setValueLocalModeNormal>:

void setValueLocalModeNormal(){
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	//status of traffic light
	state_led=0;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <setValueLocalModeNormal+0x38>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
	//the time of status of traffic light
	counter_second=-1;
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <setValueLocalModeNormal+0x3c>)
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	601a      	str	r2, [r3, #0]
	//countdown the time of led_red
	counter_red=0;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <setValueLocalModeNormal+0x40>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
	//countdown the time of led_green
	counter_green=0;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <setValueLocalModeNormal+0x44>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
	//countdown the time of led_yellow
	counter_yellow=0;
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <setValueLocalModeNormal+0x48>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
	//turn on or turn off 4 led7segment
	status_led7segment=0;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <setValueLocalModeNormal+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
	//count the time of led_green or led_yellow
	counter_second1=0;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <setValueLocalModeNormal+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000098 	.word	0x20000098
 80015ac:	20000048 	.word	0x20000048
 80015b0:	2000009c 	.word	0x2000009c
 80015b4:	200000a0 	.word	0x200000a0
 80015b8:	200000a4 	.word	0x200000a4
 80015bc:	200000a8 	.word	0x200000a8
 80015c0:	200000ac 	.word	0x200000ac

080015c4 <normal_mode>:

void normal_mode(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	if(timer1_flag==1){
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <normal_mode+0x30>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <normal_mode+0x18>
		setTimer1(1000);
 80015d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d4:	f000 f902 	bl	80017dc <setTimer1>
		trafficlight();
 80015d8:	f7ff fca8 	bl	8000f2c <trafficlight>
	}
	if(timer2_flag==1){
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <normal_mode+0x34>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <normal_mode+0x2c>
		setTimer2(500);
 80015e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e8:	f000 f914 	bl	8001814 <setTimer2>
		displayFour7Segemnt();
 80015ec:	f7ff fd82 	bl	80010f4 <displayFour7Segemnt>
	}
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200000b8 	.word	0x200000b8
 80015f8:	200000c0 	.word	0x200000c0

080015fc <redBlinking>:
 *      Author: ACER
 */

#include "redMode.h"

void redBlinking(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	//turn off all led
	if(clear_all_traffic_led==0){
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <redBlinking+0x7c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d126      	bne.n	8001656 <redBlinking+0x5a>
		clear_all_traffic_led=1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <redBlinking+0x7c>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001614:	4819      	ldr	r0, [pc, #100]	; (800167c <redBlinking+0x80>)
 8001616:	f000 fe08 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001620:	4816      	ldr	r0, [pc, #88]	; (800167c <redBlinking+0x80>)
 8001622:	f000 fe02 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <redBlinking+0x80>)
 800162e:	f000 fdfc 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001638:	4810      	ldr	r0, [pc, #64]	; (800167c <redBlinking+0x80>)
 800163a:	f000 fdf6 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <redBlinking+0x80>)
 8001646:	f000 fdf0 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001650:	480a      	ldr	r0, [pc, #40]	; (800167c <redBlinking+0x80>)
 8001652:	f000 fdea 	bl	800222a <HAL_GPIO_WritePin>
	}
	//blinking led-red
	if(clear_all_traffic_led==1){
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <redBlinking+0x7c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d109      	bne.n	8001672 <redBlinking+0x76>
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800165e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <redBlinking+0x80>)
 8001664:	f000 fdf9 	bl	800225a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8001668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <redBlinking+0x80>)
 800166e:	f000 fdf4 	bl	800225a <HAL_GPIO_TogglePin>
	}
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000090 	.word	0x20000090
 800167c:	40010800 	.word	0x40010800

08001680 <displayTimeRedAndMode>:

//turn on or turn off 4 led7segment
int statusLed7SegmentMode2=0;
void displayTimeRedAndMode(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	//turn on led7segment 1 and 3
		if(statusLed7SegmentMode2==0){
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <displayTimeRedAndMode+0xc0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d123      	bne.n	80016d4 <displayTimeRedAndMode+0x54>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	482c      	ldr	r0, [pc, #176]	; (8001744 <displayTimeRedAndMode+0xc4>)
 8001692:	f000 fdca 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001696:	2201      	movs	r2, #1
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	482a      	ldr	r0, [pc, #168]	; (8001744 <displayTimeRedAndMode+0xc4>)
 800169c:	f000 fdc5 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	4827      	ldr	r0, [pc, #156]	; (8001744 <displayTimeRedAndMode+0xc4>)
 80016a8:	f000 fdbf 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b2:	4824      	ldr	r0, [pc, #144]	; (8001744 <displayTimeRedAndMode+0xc4>)
 80016b4:	f000 fdb9 	bl	800222a <HAL_GPIO_WritePin>
			display7Segment12(time_red/10);
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <displayTimeRedAndMode+0xc8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a23      	ldr	r2, [pc, #140]	; (800174c <displayTimeRedAndMode+0xcc>)
 80016be:	fb82 1203 	smull	r1, r2, r2, r3
 80016c2:	1092      	asrs	r2, r2, #2
 80016c4:	17db      	asrs	r3, r3, #31
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fe07 	bl	80002dc <display7Segment12>
			display7Segment34(0);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7fe ff94 	bl	80005fc <display7Segment34>
		}
		//turn on led7segment 2 and 4
		if(statusLed7SegmentMode2==1){
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <displayTimeRedAndMode+0xc0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d128      	bne.n	800172e <displayTimeRedAndMode+0xae>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	2140      	movs	r1, #64	; 0x40
 80016e0:	4818      	ldr	r0, [pc, #96]	; (8001744 <displayTimeRedAndMode+0xc4>)
 80016e2:	f000 fda2 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	4816      	ldr	r0, [pc, #88]	; (8001744 <displayTimeRedAndMode+0xc4>)
 80016ec:	f000 fd9d 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <displayTimeRedAndMode+0xc4>)
 80016f8:	f000 fd97 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001702:	4810      	ldr	r0, [pc, #64]	; (8001744 <displayTimeRedAndMode+0xc4>)
 8001704:	f000 fd91 	bl	800222a <HAL_GPIO_WritePin>
			display7Segment12(time_red-10*(time_red/10));
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <displayTimeRedAndMode+0xc8>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <displayTimeRedAndMode+0xcc>)
 800170e:	fb83 1302 	smull	r1, r3, r3, r2
 8001712:	1099      	asrs	r1, r3, #2
 8001714:	17d3      	asrs	r3, r2, #31
 8001716:	1ac9      	subs	r1, r1, r3
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	1ad1      	subs	r1, r2, r3
 8001722:	4608      	mov	r0, r1
 8001724:	f7fe fdda 	bl	80002dc <display7Segment12>
			display7Segment34(2);
 8001728:	2002      	movs	r0, #2
 800172a:	f7fe ff67 	bl	80005fc <display7Segment34>
		}
		statusLed7SegmentMode2=1-statusLed7SegmentMode2;
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <displayTimeRedAndMode+0xc0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f1c3 0301 	rsb	r3, r3, #1
 8001736:	4a02      	ldr	r2, [pc, #8]	; (8001740 <displayTimeRedAndMode+0xc0>)
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200000b0 	.word	0x200000b0
 8001744:	40010800 	.word	0x40010800
 8001748:	2000003c 	.word	0x2000003c
 800174c:	66666667 	.word	0x66666667

08001750 <increaseTimeRed>:

//increase the timer of led-red when press button 2(button_flag[1]=1)
void increaseTimeRed(){
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	if(button_flag[1]==1){
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <increaseTimeRed+0x34>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10e      	bne.n	800177a <increaseTimeRed+0x2a>
		button_flag[1]=0;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <increaseTimeRed+0x34>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
		time_red++;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <increaseTimeRed+0x38>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <increaseTimeRed+0x38>)
 800176a:	6013      	str	r3, [r2, #0]
		if(time_red>99) time_red=1;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <increaseTimeRed+0x38>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b63      	cmp	r3, #99	; 0x63
 8001772:	dd02      	ble.n	800177a <increaseTimeRed+0x2a>
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <increaseTimeRed+0x38>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
	}
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000074 	.word	0x20000074
 8001788:	2000003c 	.word	0x2000003c

0800178c <setValueRed>:

void setValueRed(){
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
		time_green=time_red-time_yellow;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <setValueRed+0x1c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <setValueRed+0x20>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <setValueRed+0x24>)
 800179c:	6013      	str	r3, [r2, #0]
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000003c 	.word	0x2000003c
 80017ac:	20000044 	.word	0x20000044
 80017b0:	20000040 	.word	0x20000040

080017b4 <red_mode>:

void red_mode(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	increaseTimeRed();
 80017b8:	f7ff ffca 	bl	8001750 <increaseTimeRed>
	if(timer1_flag==1){
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <red_mode+0x24>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <red_mode+0x20>
		setTimer1(500);
 80017c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c8:	f000 f808 	bl	80017dc <setTimer1>
		redBlinking();
 80017cc:	f7ff ff16 	bl	80015fc <redBlinking>
		displayTimeRedAndMode();
 80017d0:	f7ff ff56 	bl	8001680 <displayTimeRedAndMode>
	}
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200000b8 	.word	0x200000b8

080017dc <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <setTimer1+0x2c>)
 80017e8:	fb82 1203 	smull	r1, r2, r2, r3
 80017ec:	1092      	asrs	r2, r2, #2
 80017ee:	17db      	asrs	r3, r3, #31
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <setTimer1+0x30>)
 80017f4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <setTimer1+0x34>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	66666667 	.word	0x66666667
 800180c:	200000b4 	.word	0x200000b4
 8001810:	200000b8 	.word	0x200000b8

08001814 <setTimer2>:
void setTimer2(int duration){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <setTimer2+0x2c>)
 8001820:	fb82 1203 	smull	r1, r2, r2, r3
 8001824:	1092      	asrs	r2, r2, #2
 8001826:	17db      	asrs	r3, r3, #31
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a06      	ldr	r2, [pc, #24]	; (8001844 <setTimer2+0x30>)
 800182c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <setTimer2+0x34>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	66666667 	.word	0x66666667
 8001844:	200000bc 	.word	0x200000bc
 8001848:	200000c0 	.word	0x200000c0

0800184c <setTimer3>:
void setTimer3(int duration){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <setTimer3+0x2c>)
 8001858:	fb82 1203 	smull	r1, r2, r2, r3
 800185c:	1092      	asrs	r2, r2, #2
 800185e:	17db      	asrs	r3, r3, #31
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	4a06      	ldr	r2, [pc, #24]	; (800187c <setTimer3+0x30>)
 8001864:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <setTimer3+0x34>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	66666667 	.word	0x66666667
 800187c:	200000c4 	.word	0x200000c4
 8001880:	200000c8 	.word	0x200000c8

08001884 <timerRun>:

void timerRun(){
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <timerRun+0x6c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd0b      	ble.n	80018a8 <timerRun+0x24>
		timer1_counter--;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <timerRun+0x6c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <timerRun+0x6c>)
 8001898:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <timerRun+0x6c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dc02      	bgt.n	80018a8 <timerRun+0x24>
			timer1_flag = 1;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <timerRun+0x70>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <timerRun+0x74>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd0b      	ble.n	80018c8 <timerRun+0x44>
		timer2_counter--;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <timerRun+0x74>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <timerRun+0x74>)
 80018b8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <timerRun+0x74>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dc02      	bgt.n	80018c8 <timerRun+0x44>
			timer2_flag = 1;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <timerRun+0x78>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <timerRun+0x7c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dd0b      	ble.n	80018e8 <timerRun+0x64>
		timer3_counter--;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <timerRun+0x7c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <timerRun+0x7c>)
 80018d8:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <timerRun+0x7c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dc02      	bgt.n	80018e8 <timerRun+0x64>
			timer3_flag = 1;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <timerRun+0x80>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	200000b4 	.word	0x200000b4
 80018f4:	200000b8 	.word	0x200000b8
 80018f8:	200000bc 	.word	0x200000bc
 80018fc:	200000c0 	.word	0x200000c0
 8001900:	200000c4 	.word	0x200000c4
 8001904:	200000c8 	.word	0x200000c8

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_MspInit+0x5c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_MspInit+0x5c>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_MspInit+0x5c>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_MspInit+0x5c>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_MspInit+0x60>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_MspInit+0x60>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000

0800196c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d113      	bne.n	80019a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_TIM_Base_MspInit+0x44>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_TIM_Base_MspInit+0x44>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_TIM_Base_MspInit+0x44>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	201c      	movs	r0, #28
 800199c:	f000 fa7d 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a0:	201c      	movs	r0, #28
 80019a2:	f000 fa96 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <NMI_Handler+0x4>

080019ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <MemManage_Handler+0x4>

080019c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fa:	f000 f95b 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM2_IRQHandler+0x10>)
 8001a0a:	f001 f8c3 	bl	8002b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200000d0 	.word	0x200000d0

08001a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <yellowBlinking>:
 */


#include "yellowMode.h"

void yellowBlinking(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	//turn off all led
	if(clear_all_traffic_led==0){
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <yellowBlinking+0x7c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d126      	bne.n	8001a7e <yellowBlinking+0x5a>
		clear_all_traffic_led=1;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <yellowBlinking+0x7c>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a3c:	4819      	ldr	r0, [pc, #100]	; (8001aa4 <yellowBlinking+0x80>)
 8001a3e:	f000 fbf4 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a48:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <yellowBlinking+0x80>)
 8001a4a:	f000 fbee 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a54:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <yellowBlinking+0x80>)
 8001a56:	f000 fbe8 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a60:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <yellowBlinking+0x80>)
 8001a62:	f000 fbe2 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <yellowBlinking+0x80>)
 8001a6e:	f000 fbdc 	bl	800222a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a78:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <yellowBlinking+0x80>)
 8001a7a:	f000 fbd6 	bl	800222a <HAL_GPIO_WritePin>
	}
	//blinking led-green
	if(clear_all_traffic_led==1){
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <yellowBlinking+0x7c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d109      	bne.n	8001a9a <yellowBlinking+0x76>
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <yellowBlinking+0x80>)
 8001a8c:	f000 fbe5 	bl	800225a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <yellowBlinking+0x80>)
 8001a96:	f000 fbe0 	bl	800225a <HAL_GPIO_TogglePin>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000090 	.word	0x20000090
 8001aa4:	40010800 	.word	0x40010800

08001aa8 <displayTimeYellowAndMode>:

//turn on or turn off 4 led7segment
int statusLed7SegmentMode4=0;
void displayTimeYellowAndMode(){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	//turn on led7segment 1 and 3
		if(statusLed7SegmentMode4==0){
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <displayTimeYellowAndMode+0xc0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d123      	bne.n	8001afc <displayTimeYellowAndMode+0x54>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2140      	movs	r1, #64	; 0x40
 8001ab8:	482c      	ldr	r0, [pc, #176]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001aba:	f000 fbb6 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	482a      	ldr	r0, [pc, #168]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001ac4:	f000 fbb1 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ace:	4827      	ldr	r0, [pc, #156]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001ad0:	f000 fbab 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ada:	4824      	ldr	r0, [pc, #144]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001adc:	f000 fba5 	bl	800222a <HAL_GPIO_WritePin>
			display7Segment12(time_yellow/10);
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <displayTimeYellowAndMode+0xc8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <displayTimeYellowAndMode+0xcc>)
 8001ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aea:	1092      	asrs	r2, r2, #2
 8001aec:	17db      	asrs	r3, r3, #31
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fbf3 	bl	80002dc <display7Segment12>
			display7Segment34(0);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7fe fd80 	bl	80005fc <display7Segment34>
		}
		//turn on led7segment 2 and 4
		if(statusLed7SegmentMode4==1){
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <displayTimeYellowAndMode+0xc0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d128      	bne.n	8001b56 <displayTimeYellowAndMode+0xae>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	4818      	ldr	r0, [pc, #96]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001b0a:	f000 fb8e 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	4816      	ldr	r0, [pc, #88]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001b14:	f000 fb89 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1e:	4813      	ldr	r0, [pc, #76]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001b20:	f000 fb83 	bl	800222a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2a:	4810      	ldr	r0, [pc, #64]	; (8001b6c <displayTimeYellowAndMode+0xc4>)
 8001b2c:	f000 fb7d 	bl	800222a <HAL_GPIO_WritePin>
			display7Segment12(time_yellow-10*(time_yellow/10));
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <displayTimeYellowAndMode+0xc8>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <displayTimeYellowAndMode+0xcc>)
 8001b36:	fb83 1302 	smull	r1, r3, r3, r2
 8001b3a:	1099      	asrs	r1, r3, #2
 8001b3c:	17d3      	asrs	r3, r2, #31
 8001b3e:	1ac9      	subs	r1, r1, r3
 8001b40:	460b      	mov	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	1ad1      	subs	r1, r2, r3
 8001b4a:	4608      	mov	r0, r1
 8001b4c:	f7fe fbc6 	bl	80002dc <display7Segment12>
			display7Segment34(4);
 8001b50:	2004      	movs	r0, #4
 8001b52:	f7fe fd53 	bl	80005fc <display7Segment34>
		}
		statusLed7SegmentMode4=1-statusLed7SegmentMode4;
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <displayTimeYellowAndMode+0xc0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1c3 0301 	rsb	r3, r3, #1
 8001b5e:	4a02      	ldr	r2, [pc, #8]	; (8001b68 <displayTimeYellowAndMode+0xc0>)
 8001b60:	6013      	str	r3, [r2, #0]
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200000cc 	.word	0x200000cc
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	20000044 	.word	0x20000044
 8001b74:	66666667 	.word	0x66666667

08001b78 <increaseTimeYellow>:

//increase the timer of led-yellow when press button 2(button_flag[1]=1)
void increaseTimeYellow(){
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
	if(button_flag[1]==1){
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <increaseTimeYellow+0x34>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10e      	bne.n	8001ba2 <increaseTimeYellow+0x2a>
		button_flag[1]=0;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <increaseTimeYellow+0x34>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
		time_yellow++;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <increaseTimeYellow+0x38>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <increaseTimeYellow+0x38>)
 8001b92:	6013      	str	r3, [r2, #0]
		if(time_yellow>99) time_yellow=1;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <increaseTimeYellow+0x38>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b63      	cmp	r3, #99	; 0x63
 8001b9a:	dd02      	ble.n	8001ba2 <increaseTimeYellow+0x2a>
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <increaseTimeYellow+0x38>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000074 	.word	0x20000074
 8001bb0:	20000044 	.word	0x20000044

08001bb4 <yellow_mode>:
		if(time_green+time_yellow<=99) {
			time_red=time_green+time_yellow;
	    }
}

void yellow_mode(){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	increaseTimeYellow();
 8001bb8:	f7ff ffde 	bl	8001b78 <increaseTimeYellow>
	if(timer1_flag==1){
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <yellow_mode+0x24>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <yellow_mode+0x20>
		setTimer1(500);
 8001bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc8:	f7ff fe08 	bl	80017dc <setTimer1>
		yellowBlinking();
 8001bcc:	f7ff ff2a 	bl	8001a24 <yellowBlinking>
		displayTimeYellowAndMode();
 8001bd0:	f7ff ff6a 	bl	8001aa8 <displayTimeYellowAndMode>
	}
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200000b8 	.word	0x200000b8

08001bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bde:	490d      	ldr	r1, [pc, #52]	; (8001c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf4:	4c0a      	ldr	r4, [pc, #40]	; (8001c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c02:	f7ff ff09 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c06:	f001 fb0d 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0a:	f7ff f875 	bl	8000cf8 <main>
  bx lr
 8001c0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001c18:	080032bc 	.word	0x080032bc
  ldr r2, =_sbss
 8001c1c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001c20:	2000011c 	.word	0x2000011c

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_Init+0x28>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_Init+0x28>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f923 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff fe60 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f93b 	bl	8001eee <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 f903 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2000004c 	.word	0x2000004c
 8001cac:	20000054 	.word	0x20000054
 8001cb0:	20000050 	.word	0x20000050

08001cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x1c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000054 	.word	0x20000054
 8001cd4:	20000118 	.word	0x20000118

08001cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <HAL_GetTick+0x10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000118 	.word	0x20000118

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4906      	ldr	r1, [pc, #24]	; (8001d84 <__NVIC_EnableIRQ+0x34>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff90 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff2d 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff42 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff90 	bl	8001ddc <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5f 	bl	8001d88 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff35 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b08b      	sub	sp, #44	; 0x2c
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e148      	b.n	80021ae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8137 	bne.w	80021a8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4aa3      	ldr	r2, [pc, #652]	; (80021cc <HAL_GPIO_Init+0x2c4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d05e      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f44:	4aa1      	ldr	r2, [pc, #644]	; (80021cc <HAL_GPIO_Init+0x2c4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d875      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f4a:	4aa1      	ldr	r2, [pc, #644]	; (80021d0 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d058      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f50:	4a9f      	ldr	r2, [pc, #636]	; (80021d0 <HAL_GPIO_Init+0x2c8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d86f      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f56:	4a9f      	ldr	r2, [pc, #636]	; (80021d4 <HAL_GPIO_Init+0x2cc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d052      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a9d      	ldr	r2, [pc, #628]	; (80021d4 <HAL_GPIO_Init+0x2cc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d869      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f62:	4a9d      	ldr	r2, [pc, #628]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04c      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f68:	4a9b      	ldr	r2, [pc, #620]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d863      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a9b      	ldr	r2, [pc, #620]	; (80021dc <HAL_GPIO_Init+0x2d4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d046      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f74:	4a99      	ldr	r2, [pc, #612]	; (80021dc <HAL_GPIO_Init+0x2d4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d85d      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d82a      	bhi.n	8001fd4 <HAL_GPIO_Init+0xcc>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d859      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f82:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_GPIO_Init+0x80>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08002003 	.word	0x08002003
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fef 	.word	0x08001fef
 8001f94:	08002031 	.word	0x08002031
 8001f98:	08002037 	.word	0x08002037
 8001f9c:	08002037 	.word	0x08002037
 8001fa0:	08002037 	.word	0x08002037
 8001fa4:	08002037 	.word	0x08002037
 8001fa8:	08002037 	.word	0x08002037
 8001fac:	08002037 	.word	0x08002037
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	08002037 	.word	0x08002037
 8001fb8:	08002037 	.word	0x08002037
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002037 	.word	0x08002037
 8001fc4:	08002037 	.word	0x08002037
 8001fc8:	08002037 	.word	0x08002037
 8001fcc:	08001fe5 	.word	0x08001fe5
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	4a82      	ldr	r2, [pc, #520]	; (80021e0 <HAL_GPIO_Init+0x2d8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fda:	e02c      	b.n	8002036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e029      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e024      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e01f      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e01a      	b.n	8002038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200a:	2304      	movs	r3, #4
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e013      	b.n	8002038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	611a      	str	r2, [r3, #16]
          break;
 8002022:	e009      	b.n	8002038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	615a      	str	r2, [r3, #20]
          break;
 800202e:	e003      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x130>
          break;
 8002036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d801      	bhi.n	8002042 <HAL_GPIO_Init+0x13a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_Init+0x13e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2bff      	cmp	r3, #255	; 0xff
 800204c:	d802      	bhi.n	8002054 <HAL_GPIO_Init+0x14c>
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x152>
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3b08      	subs	r3, #8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	210f      	movs	r1, #15
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8090 	beq.w	80021a8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002088:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_GPIO_Init+0x2dc>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a55      	ldr	r2, [pc, #340]	; (80021e4 <HAL_GPIO_Init+0x2dc>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_GPIO_Init+0x2dc>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a0:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_GPIO_Init+0x2e0>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a49      	ldr	r2, [pc, #292]	; (80021ec <HAL_GPIO_Init+0x2e4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00d      	beq.n	80020e8 <HAL_GPIO_Init+0x1e0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <HAL_GPIO_Init+0x2e8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <HAL_GPIO_Init+0x1dc>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <HAL_GPIO_Init+0x2ec>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_GPIO_Init+0x1d8>
 80020dc:	2302      	movs	r3, #2
 80020de:	e004      	b.n	80020ea <HAL_GPIO_Init+0x1e2>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e002      	b.n	80020ea <HAL_GPIO_Init+0x1e2>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_GPIO_Init+0x1e2>
 80020e8:	2300      	movs	r3, #0
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	f002 0203 	and.w	r2, r2, #3
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	4093      	lsls	r3, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020fa:	493b      	ldr	r1, [pc, #236]	; (80021e8 <HAL_GPIO_Init+0x2e0>)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4937      	ldr	r1, [pc, #220]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	43db      	mvns	r3, r3
 800212a:	4933      	ldr	r1, [pc, #204]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800212c:	4013      	ands	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	492d      	ldr	r1, [pc, #180]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	4929      	ldr	r1, [pc, #164]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002154:	4013      	ands	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	4923      	ldr	r1, [pc, #140]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	491f      	ldr	r1, [pc, #124]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800217c:	4013      	ands	r3, r2
 800217e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	4919      	ldr	r1, [pc, #100]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	60cb      	str	r3, [r1, #12]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4915      	ldr	r1, [pc, #84]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3301      	adds	r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f aeaf 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	372c      	adds	r7, #44	; 0x2c
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	10320000 	.word	0x10320000
 80021d0:	10310000 	.word	0x10310000
 80021d4:	10220000 	.word	0x10220000
 80021d8:	10210000 	.word	0x10210000
 80021dc:	10120000 	.word	0x10120000
 80021e0:	10110000 	.word	0x10110000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40010800 	.word	0x40010800
 80021f0:	40010c00 	.word	0x40010c00
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800223a:	787b      	ldrb	r3, [r7, #1]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002246:	e003      	b.n	8002250 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	041a      	lsls	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800226c:	887a      	ldrh	r2, [r7, #2]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	041a      	lsls	r2, r3, #16
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43d9      	mvns	r1, r3
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	400b      	ands	r3, r1
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e26c      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8087 	beq.w	80023ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ac:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d00c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b8:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
 80022c4:	4b8c      	ldr	r3, [pc, #560]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d10b      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	4b89      	ldr	r3, [pc, #548]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x12c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d168      	bne.n	80023b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e246      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x76>
 80022f4:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7f      	ldr	r2, [pc, #508]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e02e      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x98>
 800230a:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a77      	ldr	r2, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0xbc>
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a71      	ldr	r2, [pc, #452]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6e      	ldr	r2, [pc, #440]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002348:	4b6b      	ldr	r3, [pc, #428]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fcb6 	bl	8001cd8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fcb2 	bl	8001cd8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1fa      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xe4>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fca2 	bl	8001cd8 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff fc9e 	bl	8001cd8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1e6      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x10c>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d063      	beq.n	800248e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
 80023de:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1ba      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4939      	ldr	r1, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff fc57 	bl	8001cd8 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242e:	f7ff fc53 	bl	8001cd8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e19b      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4927      	ldr	r1, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff fc36 	bl	8001cd8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002470:	f7ff fc32 	bl	8001cd8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e17a      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03a      	beq.n	8002510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7ff fc16 	bl	8001cd8 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7ff fc12 	bl	8001cd8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e15a      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 faa6 	bl	8002a20 <RCC_Delay>
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7ff fbfc 	bl	8001cd8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7ff fbf8 	bl	8001cd8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d908      	bls.n	8002504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e140      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	42420000 	.word	0x42420000
 8002500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b9e      	ldr	r3, [pc, #632]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e9      	bne.n	80024e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a6 	beq.w	800266a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b97      	ldr	r3, [pc, #604]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b94      	ldr	r3, [pc, #592]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a93      	ldr	r2, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b91      	ldr	r3, [pc, #580]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a8a      	ldr	r2, [pc, #552]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7ff fbb9 	bl	8001cd8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7ff fbb5 	bl	8001cd8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	; 0x64
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0fd      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x312>
 8002590:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e02d      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x334>
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a75      	ldr	r2, [pc, #468]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a72      	ldr	r2, [pc, #456]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	e01c      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x356>
 80025c8:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a6c      	ldr	r2, [pc, #432]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a69      	ldr	r2, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e00b      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a66      	ldr	r2, [pc, #408]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	4b64      	ldr	r3, [pc, #400]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a63      	ldr	r2, [pc, #396]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7ff fb69 	bl	8001cd8 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7ff fb65 	bl	8001cd8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0ab      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCC_OscConfig+0x37e>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7ff fb53 	bl	8001cd8 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7ff fb4f 	bl	8001cd8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e095      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b48      	ldr	r3, [pc, #288]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a47      	ldr	r2, [pc, #284]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8081 	beq.w	8002776 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002674:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d061      	beq.n	8002744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d146      	bne.n	8002716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x4fc>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7ff fb23 	bl	8001cd8 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7ff fb1f 	bl	8001cd8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e067      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	492d      	ldr	r1, [pc, #180]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a19      	ldr	r1, [r3, #32]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	430b      	orrs	r3, r1
 80026e2:	4927      	ldr	r1, [pc, #156]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x4fc>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7ff faf3 	bl	8001cd8 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7ff faef 	bl	8001cd8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e037      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x46a>
 8002714:	e02f      	b.n	8002776 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_RCC_OscConfig+0x4fc>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fadc 	bl	8001cd8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff fad8 	bl	8001cd8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e020      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x498>
 8002742:	e018      	b.n	8002776 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e013      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	429a      	cmp	r2, r3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	42420060 	.word	0x42420060

0800278c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d0      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d910      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4965      	ldr	r1, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800280a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d040      	beq.n	80028ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d115      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e073      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06b      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4936      	ldr	r1, [pc, #216]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7ff fa2c 	bl	8001cd8 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7ff fa28 	bl	8001cd8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e053      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d210      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 0207 	bic.w	r2, r3, #7
 80028c2:	4922      	ldr	r1, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1cc>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1d0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f98a 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40022000 	.word	0x40022000
 8002950:	40021000 	.word	0x40021000
 8002954:	080032a4 	.word	0x080032a4
 8002958:	2000004c 	.word	0x2000004c
 800295c:	20000050 	.word	0x20000050

08002960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	b490      	push	{r4, r7}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002968:	1d3c      	adds	r4, r7, #4
 800296a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002970:	f240 2301 	movw	r3, #513	; 0x201
 8002974:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b04      	cmp	r3, #4
 8002998:	d002      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x40>
 800299a:	2b08      	cmp	r3, #8
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x46>
 800299e:	e02d      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a2:	623b      	str	r3, [r7, #32]
      break;
 80029a4:	e02d      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	0c9b      	lsrs	r3, r3, #18
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029b2:	4413      	add	r3, r2
 80029b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c5b      	lsrs	r3, r3, #17
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029d2:	4413      	add	r3, r2
 80029d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	fb02 f203 	mul.w	r2, r2, r3
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e004      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	623b      	str	r3, [r7, #32]
      break;
 80029fa:	e002      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fe:	623b      	str	r3, [r7, #32]
      break;
 8002a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a02:	6a3b      	ldr	r3, [r7, #32]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc90      	pop	{r4, r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	08003294 	.word	0x08003294
 8002a14:	40021000 	.word	0x40021000
 8002a18:	007a1200 	.word	0x007a1200
 8002a1c:	003d0900 	.word	0x003d0900

08002a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <RCC_Delay+0x34>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <RCC_Delay+0x38>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a5b      	lsrs	r3, r3, #9
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a3c:	bf00      	nop
  }
  while (Delay --);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e5a      	subs	r2, r3, #1
 8002a42:	60fa      	str	r2, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <RCC_Delay+0x1c>
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	2000004c 	.word	0x2000004c
 8002a58:	10624dd3 	.word	0x10624dd3

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe ff72 	bl	800196c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fa6a 	bl	8002f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d001      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e035      	b.n	8002b80 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <HAL_TIM_Base_Start_IT+0x90>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_TIM_Base_Start_IT+0x4e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIM_Base_Start_IT+0x4e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <HAL_TIM_Base_Start_IT+0x94>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d111      	bne.n	8002b6e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d010      	beq.n	8002b7e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	e007      	b.n	8002b7e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40000400 	.word	0x40000400

08002b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0202 	mvn.w	r2, #2
 8002bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9b1 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9a4 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f9b3 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d122      	bne.n	8002c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0204 	mvn.w	r2, #4
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f987 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002c30:	e005      	b.n	8002c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f97a 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f989 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0208 	mvn.w	r2, #8
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f95d 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f950 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f95f 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0210 	mvn.w	r2, #16
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f933 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f926 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f935 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0201 	mvn.w	r2, #1
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fe f8f8 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	2b80      	cmp	r3, #128	; 0x80
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa67 	bl	8003212 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8f9 	bl	8002f62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0220 	mvn.w	r2, #32
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa32 	bl	8003200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIM_ConfigClockSource+0x18>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e0b3      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x180>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df4:	d03e      	beq.n	8002e74 <HAL_TIM_ConfigClockSource+0xd0>
 8002df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfa:	f200 8087 	bhi.w	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e02:	f000 8085 	beq.w	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	d87f      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d01a      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0xa2>
 8002e10:	2b70      	cmp	r3, #112	; 0x70
 8002e12:	d87b      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d050      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x116>
 8002e18:	2b60      	cmp	r3, #96	; 0x60
 8002e1a:	d877      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002e1c:	2b50      	cmp	r3, #80	; 0x50
 8002e1e:	d03c      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0xf6>
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d873      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d058      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x136>
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d86f      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002e2c:	2b30      	cmp	r3, #48	; 0x30
 8002e2e:	d064      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x156>
 8002e30:	2b30      	cmp	r3, #48	; 0x30
 8002e32:	d86b      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d060      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x156>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d867      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d05c      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x156>
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d05a      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e44:	e062      	b.n	8002f0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6899      	ldr	r1, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f000 f95c 	bl	8003112 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	609a      	str	r2, [r3, #8]
      break;
 8002e72:	e04e      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f000 f945 	bl	8003112 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e96:	609a      	str	r2, [r3, #8]
      break;
 8002e98:	e03b      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f000 f8bc 	bl	8003024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2150      	movs	r1, #80	; 0x50
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f913 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e02b      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f000 f8da 	bl	8003080 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2160      	movs	r1, #96	; 0x60
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f903 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002ed8:	e01b      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f000 f89c 	bl	8003024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2140      	movs	r1, #64	; 0x40
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f8f3 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002ef8:	e00b      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 f8ea 	bl	80030de <TIM_ITRx_SetConfig>
        break;
 8002f0a:	e002      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f0c:	bf00      	nop
 8002f0e:	e000      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <TIM_Base_SetConfig+0xa8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0x28>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x28>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <TIM_Base_SetConfig+0xac>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	; (800301c <TIM_Base_SetConfig+0xa8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0x52>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0x52>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a17      	ldr	r2, [pc, #92]	; (8003020 <TIM_Base_SetConfig+0xac>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a07      	ldr	r2, [pc, #28]	; (800301c <TIM_Base_SetConfig+0xa8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	615a      	str	r2, [r3, #20]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400

08003024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 0201 	bic.w	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 030a 	bic.w	r3, r3, #10
 8003060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 0210 	bic.w	r2, r3, #16
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	031b      	lsls	r3, r3, #12
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	621a      	str	r2, [r3, #32]
}
 80030d4:	bf00      	nop
 80030d6:	371c      	adds	r7, #28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f043 0307 	orr.w	r3, r3, #7
 8003100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800312c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	021a      	lsls	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	431a      	orrs	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4313      	orrs	r3, r2
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	609a      	str	r2, [r3, #8]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003164:	2302      	movs	r3, #2
 8003166:	e041      	b.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d004      	beq.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10c      	bne.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40000400 	.word	0x40000400

08003200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	2600      	movs	r6, #0
 8003228:	4d0c      	ldr	r5, [pc, #48]	; (800325c <__libc_init_array+0x38>)
 800322a:	4c0d      	ldr	r4, [pc, #52]	; (8003260 <__libc_init_array+0x3c>)
 800322c:	1b64      	subs	r4, r4, r5
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	42a6      	cmp	r6, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	f000 f822 	bl	800327c <_init>
 8003238:	2600      	movs	r6, #0
 800323a:	4d0a      	ldr	r5, [pc, #40]	; (8003264 <__libc_init_array+0x40>)
 800323c:	4c0a      	ldr	r4, [pc, #40]	; (8003268 <__libc_init_array+0x44>)
 800323e:	1b64      	subs	r4, r4, r5
 8003240:	10a4      	asrs	r4, r4, #2
 8003242:	42a6      	cmp	r6, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	f855 3b04 	ldr.w	r3, [r5], #4
 800324c:	4798      	blx	r3
 800324e:	3601      	adds	r6, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	f855 3b04 	ldr.w	r3, [r5], #4
 8003256:	4798      	blx	r3
 8003258:	3601      	adds	r6, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	080032b4 	.word	0x080032b4
 8003260:	080032b4 	.word	0x080032b4
 8003264:	080032b4 	.word	0x080032b4
 8003268:	080032b8 	.word	0x080032b8

0800326c <memset>:
 800326c:	4603      	mov	r3, r0
 800326e:	4402      	add	r2, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	d100      	bne.n	8003276 <memset+0xa>
 8003274:	4770      	bx	lr
 8003276:	f803 1b01 	strb.w	r1, [r3], #1
 800327a:	e7f9      	b.n	8003270 <memset+0x4>

0800327c <_init>:
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327e:	bf00      	nop
 8003280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003282:	bc08      	pop	{r3}
 8003284:	469e      	mov	lr, r3
 8003286:	4770      	bx	lr

08003288 <_fini>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	bf00      	nop
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr
